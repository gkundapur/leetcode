/*
https://leetcode.com/problems/climbing-stairs/description/

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
*/

class Solution {
public:
    int climbStairs1(int n) {
    #if 0
        if (n <= 3) {
            // if n = 1, only one way to climb step by taking single step
            // if n = 2, two ways - (1+1), (2)
            // if (n = 3), three ways - (1+1+1), (1+2) or (2+1)
            return n;
        }            

        int a = 3; // no of ways to climb to prev step 
        int b = 2;  // no of ways to climb to the step before that
        int res = 0; // tracks the number of ways to climb current step

        for (int i = 3; i < n; i++) {
            res = a + b;
            a = b;
            b = res;
        }
        return res;
    #endif
        if (n == 0 || n == 1)
            return 1;

        int a = 1;
        int b = 1;
        int result;
        for (int i = 2; i <= n; i++) {
            result = a + b;
            a = b;
            b = result;
        }
        return result;
    }

    int climbStairs2(int n) {
        if (n == 0 || n == 1)
            return 1;

        return climbStairs2(n - 1) + climbStairs2(n - 2);
    }

    int climbStairs(int n) {
        return climbStairs1(n);
        //return climbStairs2(n);   
    }
};
