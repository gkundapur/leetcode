/*
https://leetcode.com/problems/powx-n/description/

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104
*/

class Solution {
public:
    double myPow(double x, int n) {
        /*
        x^n = (x ^ n/2) ^ 2  // if b is even
              (x * (x^n/2)^2) // if b is odd
        T.C: O(logn)
        */
        if (n < 0)
            x = 1/x;

        long b = labs(n);

        if (n == 0) // base case
            return 1;  // x^0 = 1
        double half = myPow(x, b/2);
        double result = half * half;
        if (b % 2 == 1) // n is odd
            result = x * result;

        return result; 
    }
};
