/*
https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected/description/?envType=problem-list-v2&envId=tree

You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.

Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void constuct_child_parent_map(TreeNode *root, int start, TreeNode *& startNode,
                        unordered_map<TreeNode *, TreeNode *>& umParent) {
        queue<TreeNode *> que;
        que.push(root);
        while (!que.empty()) {
            root = que.front();
            que.pop();
            if (root->val == start)
                startNode = root;

            if (root->left) {
                umParent[root->left] = root;
                que.push(root->left);
            }

            if (root->right) {
                umParent[root->right] = root;
                que.push(root->right);
            }

        }
    }

    int amountOfTime_bfs(TreeNode *root, int start) {
        if (root == NULL)
            return 0;

        TreeNode *startNode = NULL;
        unordered_map<TreeNode *, TreeNode *> umParent; /* child -> parent */
        constuct_child_parent_map(root, start, startNode, umParent);

        int total_time = 0;

        unordered_set<TreeNode *> visited;
        visited.insert(startNode);

        queue<pair<TreeNode *, int>> que; //{node, time}
        que.push({startNode, 0});

        while (!que.empty()) {
            pair<TreeNode *, int> p = que.front();
            TreeNode *node = p.first;
            int time = p.second;

            que.pop();

            total_time = max(total_time, time);

            // go left
            if (node->left && visited.find(node->left) == visited.end()) {
                visited.insert(node->left);
                que.push({node->left, time+1});
            }

            // go right
            if (node->right && visited.find(node->right) == visited.end()) {
                visited.insert(node->right);
                que.push({node->right, time+1});
            }

            // go to parent
            if (umParent.find(node) != umParent.end() && visited.find(umParent[node]) == visited.end()) {
                visited.insert(umParent[node]);
                que.push({umParent[node], time+1});
            }
        }
        return total_time;
    }

    int amountOfTime_dfs(TreeNode *root, int start, int &result) {
        if (root == NULL)
            return 0;

        int LH = amountOfTime_dfs(root->left, start, result);
        int RH = amountOfTime_dfs(root->right, start, result);

        if (root->val == start) {
            result = max(LH, RH);
            return -1;
        } else if (LH >= 0 && RH >= 0) {
            return max(LH, RH) + 1;
        } else { // either LH < 0 or RH < 0
            int d = abs(LH) + abs(RH);
            result = max(result, d);
            return min(LH, RH) - 1;
        }
        return 0; // not reach here        
    }

    int amountOfTime(TreeNode* root, int start) {
        //return amountOfTime_bfs(root, start);
        int result = INT_MIN;
        amountOfTime_dfs(root, start, result);
        return result;  
    }
};
