/*
https://leetcode.com/problems/reverse-odd-levels-of-binary-tree/description/?envType=problem-list-v2&envId=tree

Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.

For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

The level of a node is the number of edges along the path between it and the root node.

Input: root = [2,3,5,8,13,21,34]
Output: [2,5,3,8,13,21,34]
Explanation: 
The tree has only one odd level.
The nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.

Input: root = [7,13,11]
Output: [7,11,13]
Explanation: 
The nodes at level 1 are 13, 11, which are reversed and become 11, 13.

Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]
Output: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]
Explanation: 
The odd levels have non-zero values.
The nodes at level 1 were 1, 2, and are 2, 1 after the reversal.
The nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode *root1, TreeNode *root2, int level) {
        if (root1 == NULL || root2 == NULL)
            return;

        if (level % 2 != 0) { // level is odd
            //swap node values
            int temp = root1->val;
            root1->val = root2->val;
            root2->val = temp;
        }

        dfs(root1->left, root2->right, level+1);
        dfs(root1->right, root2->left, level+1);
    }
    
    TreeNode *bfs(TreeNode *root) {
        queue<TreeNode *> q;
        q.push(root);
        int level = 0;

        while (!q.empty()) {
            int n = q.size();
            vector<TreeNode *> levelnodes;
            while (n--) {
                TreeNode *node = q.front();
                q.pop();
                levelnodes.push_back(node);

                if (node->left)
                    q.push(node->left);
                if (node->right)
                    q.push(node->right);
            }
            if (level % 2 == 1) { // odd level
                int i = 0, j = levelnodes.size()-1;
                while (i < j) {
                    int temp = levelnodes[i]->val;
                    levelnodes[i]->val = levelnodes[j]->val;
                    levelnodes[j]->val = temp;
                    i++;
                    j--;
                }
            }
            level++;
        }
        return root;
    }

    TreeNode* reverseOddLevels(TreeNode* root) {
        if (root == NULL)
            return root;
        
        //return bfs(root);

        // root at level 0, start from level 1 which is odd level
        dfs(root->left, root->right, 1);
        return root;
        
    }
};
