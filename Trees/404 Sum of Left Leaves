/*
https://leetcode.com/problems/sum-of-left-leaves/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, return the sum of all left leaves.

A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.

Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.

Input: root = [1]
Output: 0
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves_dfs(TreeNode *root, TreeNode *parent) {
        if (root == NULL)
            return 0;

        // if it's leaf node and it's parent's left child
        if (root->left == NULL & root->right == NULL) {
            if (parent && parent->left == root)
                return root->val;
        }

        int left = sumOfLeftLeaves_dfs(root->left, root);
        int right = sumOfLeftLeaves_dfs(root->right, root);

        return left+right;
    }

    int sumOfLeftLeaves_dfs1(TreeNode *root, bool isLeftChild) {
        if (root == NULL)
            return 0;

        if (root->left == NULL && root->right == NULL && isLeftChild == true)
            return root->val;

        return sumOfLeftLeaves_dfs1(root->left, true) + sumOfLeftLeaves_dfs1(root->right, false);
    }

    int sumOfLeftLeaves_bfs(TreeNode *root) {
        if (root == NULL)
            return 0;

        int left_leaves_sum = 0;
        TreeNode *parent = NULL;
        queue<TreeNode *> q;
        q.push(root);

        while (!q.empty()) {
            TreeNode *node = q.front();
            q.pop();

            if (node->left == NULL && node->right == NULL) {
                if (parent && parent->left == node)
                    left_leaves_sum += node->val;
            }
            parent = node;
            if (node->left)
                q.push(node->left);
            if (node->right)
                q.push(node->right);
        }
        return left_leaves_sum;
    }
    
    int sumOfLeftLeaves(TreeNode* root) {
        //return sumOfLeftLeaves_dfs(root, NULL/* parent node*/);
        return sumOfLeftLeaves_dfs1(root, false/*is left child*/);
        //return sumOfLeftLeaves_bfs(root);
        
    }
};
