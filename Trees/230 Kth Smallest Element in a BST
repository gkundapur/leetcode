/*
https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/?envType=study-plan-v2&envId=top-100-liked

Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Input: root = [3,1,4,null,2], k = 1
Output: 1

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& v) {
        if (root) {
            inorder(root->left, v);
            v.push_back(root->val);
            inorder(root->right, v);
        }
    }

    int kthSmallest_1(TreeNode* root, int k) {
        vector<int> v;
        inorder(root, v);
        return v[k-1];
    }

    TreeNode* dfs(TreeNode* root, int k, int& count) {
        if (root == NULL)
            return NULL;

        TreeNode* left = dfs(root->left, k, count);
        if (left != NULL)
            return left;

        count++;
        if (count == k)
            return root;
        
        return dfs(root->right, k, count);
    }

    int kthSmallest_2(TreeNode* root, int k) {
        int count = 0;
        TreeNode *kthsmall = dfs(root, k, count);
        if (kthsmall)
            return kthsmall->val;
        else
            return -1;
    }

    int kthSmallest(TreeNode* root, int k) {
        return kthSmallest_1(root, k);
        //return kthSmallest_2(root, k);         
    }
};
