/*
https://leetcode.com/problems/delete-nodes-and-return-forest/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *delNodes_utility(TreeNode *root, unordered_set<int>& s, vector<TreeNode *>& result) {
        if (root == NULL)
            return NULL;

        root->left = delNodes_utility(root->left, s, result);
        root->right = delNodes_utility(root->right, s, result);

        if (s.find(root->val) != s.end()) {
            if (root->left)
                result.push_back(root->left);
            if (root->right)
                result.push_back(root->right);
            
            return NULL;        
        } else
            return root;
    }

    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode *> result;
        unordered_set<int> s;

        for (int i = 0; i < to_delete.size(); i++)
            s.insert(to_delete[i]);

        delNodes_utility(root, s, result);
        if (s.find(root->val) == s.end())
            result.push_back(root);

        return result;
        
    }
};
