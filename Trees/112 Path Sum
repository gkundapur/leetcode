/*
https://leetcode.com/problems/path-sum/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.

Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There are two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum_util(TreeNode *root, int targetSum, int sum) {
        if (root == NULL)
            return false;

        sum += root->val;
        if (root->left == NULL && root->right == NULL)
            return sum == targetSum;

        return hasPathSum_util(root->left, targetSum, sum) || hasPathSum_util(root->right, targetSum, sum);
    }
    
    bool hasPathSum(TreeNode* root, int targetSum) {
        int sum = 0;
        return hasPathSum_util(root, targetSum, sum);        
    }
};
