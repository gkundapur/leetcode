/*
https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=problem-list-v2&envId=tree

Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Input: preorder = [-1], inorder = [-1]
Output: [-1]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //-----------------------------------------------------------------------------------------------------------------------------
    // O(n^2) for searching for each preorder[idx] in inorder array
    TreeNode* construct(vector<int>& preorder, vector<int>& inorder, int inStart, int inEnd, int& preIdx) {
        if (inStart > inEnd) 
            return NULL;

        TreeNode *root = new TreeNode(preorder[preIdx]);
        preIdx++;

        // search preorder[preIdx] in inorder;
        int inIdx = inStart;
        while (inIdx <= inEnd) {
            if (inorder[inIdx] == root->val)
                break;
            inIdx++;
        }

        if (inStart == inEnd)
            return root;
        
        root->left = construct(preorder, inorder, inStart, inIdx-1, preIdx);
        root->right = construct(preorder, inorder, inIdx+1, inEnd, preIdx);

        return root;
    }

    //-----------------------------------------------------------------------------------------------------------------------------
    // O(n)
    TreeNode* construct_using_map(vector<int>& preorder, unordered_map<int,int>& inorderMap, int inStart, int inEnd, int& preIdx) {
        if (inStart > inEnd)
            return NULL;

        TreeNode *root = new TreeNode(preorder[preIdx]);
        preIdx++;

        if (inStart == inEnd)
            return root;
        
        // search idx in inorder map
        int inIdx = inorderMap[root->val];

        root->left = construct_using_map(preorder, inorderMap, inStart, inIdx-1, preIdx);
        root->right = construct_using_map(preorder, inorderMap, inIdx+1, inEnd, preIdx); 

        return root;
    }

    //-----------------------------------------------------------------------------------------------------------------------------
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIdx = 0;
        //return construct(preorder, inorder, 0, inorder.size()-1, preIdx);

        // approach 2
        // construct value-to-index map for inorder traversal to avoid searching in inorder array
        unordered_map<int,int> inorderMap;
        for (int i = 0; i < inorder.size(); i++)    
            inorderMap[inorder[i]] = i;

        return construct_using_map(preorder, inorderMap, 0, inorder.size()-1, preIdx);
    }
};
