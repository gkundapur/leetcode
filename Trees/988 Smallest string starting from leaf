/*
https://leetcode.com/problems/smallest-string-starting-from-leaf/description/?envType=problem-list-v2&envId=tree

You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.

Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

As a reminder, any shorter prefix of a string is lexicographically smaller.

For example, "ab" is lexicographically smaller than "aba".
A leaf of a node is a node that has no children.

Input: root = [0,1,2,3,4,3,4]
Output: "dba"

Input: root = [25,1,3,1,3,0,2]
Output: "adz"

Input: root = [2,2,1,null,1,0,null,0]
Output: "abc"
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    string result = "";
public:
    void smallestFromLeaf_dfs(TreeNode *root, string cur) {
        if (root == NULL)
            return;

        cur = char(root->val + 'a') + cur;
        if (root->left == NULL && root->right == NULL) {
            if (result == "" || result > cur)
                result = cur;
        }
        smallestFromLeaf_dfs(root->left, cur);
        smallestFromLeaf_dfs(root->right, cur);
    }
    string smallestFromLeaf(TreeNode* root) {
        smallestFromLeaf_dfs(root, "");
        return result;
        
    }
};
