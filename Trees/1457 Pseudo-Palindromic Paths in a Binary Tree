/*
https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/description/?envType=problem-list-v2&envId=tree

Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], 
the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] 
can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).

Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], 
the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).

Input: root = [9]
Output: 1
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int palidromePathCount = 0;
    
    void pseudoPalindromicPaths_approach1(TreeNode *root, vector<int>& counter) {
        if (root == NULL) 
            return;

        counter[root->val]++;

        if (root->left == NULL && root->right == NULL) {
            int oddCount = 0;  // count odd occurances of values
            for (int i = 1; i < 10; i++) {
                if (counter[i] % 2 == 1)
                    oddCount++;
            }

            if (oddCount <= 1)
                palidromePathCount++;
        }

        pseudoPalindromicPaths_approach1(root->left, counter);
        pseudoPalindromicPaths_approach1(root->right, counter); 

        counter[root->val]--;  
    }

    void pseudoPalindromicPaths_bitmagic(TreeNode *root, int path) {
        if (root == NULL)
            return;

        path = path ^ (1 << root->val);
        if (root->left == NULL && root->right == NULL) {
            if ((path & (path-1)) == 0)
                palidromePathCount++;
        }
        pseudoPalindromicPaths_bitmagic(root->left, path);
        pseudoPalindromicPaths_bitmagic(root->right, path);
    }

    int pseudoPalindromicPaths (TreeNode* root) {
        vector<int> counter(10, 0);
        //pseudoPalindromicPaths_approach1(root, counter);
        pseudoPalindromicPaths_bitmagic(root, 0);
        return palidromePathCount;
    }
};
