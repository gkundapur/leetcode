/*
https://leetcode.com/problems/count-complete-tree-nodes/description/?envType=problem-list-v2&envId=tree

Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, 
and all nodes in the last level are as far left as possible. 
It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

Input: root = [1,2,3,4,5,6]
Output: 6

Input: root = []
Output: 0

Input: root = [1]
Output: 1
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //--------------------------------------------------------------------------------------
    void countnodes(TreeNode *root, int& count) {
        if (root == NULL)
            return;

        countnodes(root->left, count);
        count++;
        countnodes(root->right, count);        
    }

    //--------------------------------------------------------------------------------------
    int leftheight(TreeNode *root) {
        int lh = 0;
        while (root) {
            lh++;
            root = root->left;
        }
        return lh;
    }

    int rightheight(TreeNode *root) {
        int rh = 0;
        while (root) {
            rh++;
            root = root->right;
        }
        return rh;
    }
    
    int countnodes_efficient(TreeNode *root) {
        if (root == NULL)
            return 0;

        int lh = leftheight(root);
        int rh = rightheight(root);
        if (lh == rh)
            return (1 << lh) - 1;

        return countnodes_efficient(root->left) + 1 + countnodes_efficient(root->right);
    }

    //--------------------------------------------------------------------------------------
    int countNodes(TreeNode* root) {
        //int count = 0;
        //countnodes(root, count);
        //return count;
        return countnodes_efficient(root);

    }
};
