https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/?envType=problem-list-v2&envId=tree

Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Input: inorder = [-1], postorder = [-1]
Output: [-1]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // O(n^2) for searching each preorder[postIdx] in inorder array
    TreeNode *construct(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd, int& postIdx) {
        if (inStart > inEnd)
            return NULL;

        TreeNode *root = new TreeNode(postorder[postIdx]);
        postIdx--;
    
        // search index of root->val in inorder array
        int inIdx = inStart;
        while (inIdx <= inEnd) {
            if (inorder[inIdx] == root->val)
                break;
            inIdx++;
        }

        root->right = construct(inorder, postorder, inIdx+1, inEnd, postIdx);
        root->left = construct(inorder, postorder, inStart, inIdx-1, postIdx);
        

        return root;
    }

    TreeNode *construct_using_map(unordered_map<int, int>& inorderMap, vector<int>& postorder, int inStart, int inEnd, int& postIdx) {
        if (inStart > inEnd)
            return NULL;

        TreeNode *root = new TreeNode(postorder[postIdx]);
        postIdx--;
    
        // search index of root->val in inorder map
        int inIdx = inorderMap[root->val];

        root->right = construct_using_map(inorderMap, postorder, inIdx+1, inEnd, postIdx);
        root->left = construct_using_map(inorderMap, postorder, inStart, inIdx-1, postIdx);
        

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postIdx = postorder.size()-1;

        // approach 1
        //return construct(inorder, postorder, 0, inorder.size()-1, postIdx);

        // approach 2
        // construct value-to-index for inorder traversal
        unordered_map<int, int> inorderMap;
        for (int i = 0; i < inorder.size(); i++)
            inorderMap[inorder[i]] = i;
        return construct_using_map(inorderMap, postorder, 0, inorder.size()-1, postIdx);        
    }
};
