/*
https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/description/?envType=problem-list-v2&envId=tree

Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.
It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, 
and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Input: preorder = [1,3]
Output: [1,null,3]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *construct(TreeNode *root, int val) {
        if (root == NULL)
            return new TreeNode(val);

        if (val < root->val)
            root->left = construct(root->left, val);
        else if (val > root->val)
            root->right = construct(root->right, val);

        return root;
    }

    TreeNode *bstFromPreorder_1(vector<int>& preorder) {
        TreeNode *root = NULL;
        int n = preorder.size();

        for (int i = 0; i < n; i++)
            root = construct(root, preorder[i]);

        return root;
    }

    TreeNode *construct2(vector<int>& preorder, int start, int end) {
        if (start > end)
            return NULL;

        TreeNode *root = new TreeNode(preorder[start]);
        if (start == end)
            return root;

        // Find the first element greater than root
        int max; 
        for (max = start+1; max < end; max++) {
            if (preorder[max] > root->val)
                break;
        }

        root->left = construct2(preorder, start+1, max-1);
        root->right = construct2(preorder, max, end);

        return root;
    }

    TreeNode *bstFromPreorder_2(vector<int>& preorder) {
        return construct2(preorder, 0, preorder.size()-1);
    }

    int idx = 0;
    TreeNode *bstFromPreorder_3(vector<int>& preorder, int parent) {
        if (idx == preorder.size() || preorder[idx] > parent)
            return NULL;

        int cur = preorder[idx++];
        TreeNode *node = new TreeNode(cur);
        node->left = bstFromPreorder_3(preorder, cur);
        node->right = bstFromPreorder_3(preorder, parent);
        return node;
    }

    //-----------------------Using Stack-----------------------------
    TreeNode *bstFromPreorder_stack(vector<int>& preorder) {
        if (preorder.empty())
            return NULL;

        TreeNode *root = new TreeNode(preorder[0]);
        stack<TreeNode *> stk;
        stk.push(root);

        for (int i = 1; i < preorder.size(); i++) {
            TreeNode *node = new TreeNode(preorder[i]);            

            if (preorder[i] < stk.top()->val)
                stk.top()->left = node;
            else {
                TreeNode* parent = NULL;
                while (!stk.empty() && preorder[i] > stk.top()->val) {
                    parent = stk.top();
                    stk.pop();
                }

                parent->right = node;
            }

            stk.push(node);
        }

        return root;
    }
    //------------------------------------------------------------------

    TreeNode* bstFromPreorder(vector<int>& preorder) {
        //return bstFromPreorder_1(preorder);
        //return bstFromPreorder_2(preorder);
        //return bstFromPreorder_3(preorder, INT_MAX);
        return bstFromPreorder_stack(preorder);
    }
};

 
