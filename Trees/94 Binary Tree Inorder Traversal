/*
https://leetcode.com/problems/binary-tree-inorder-traversal/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, return the inorder traversal of its nodes' values.

Input: root = [1,null,2,3]
Output: [1,3,2]

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,2,6,5,7,1,3,9,8]

Input: root = []
Output: []

Input: root = [1]
Output: [1]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode *root, vector<int>& result) {
        if (root) {
            inorder(root->left, result);
            result.push_back(root->val);
            inorder(root->right, result);
        }
    }
    
    void inorder_iterative(TreeNode *root, vector<int>& result) {
        if (root == NULL)
            return;

        stack<TreeNode *> st;
        TreeNode *cur = root;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) {
                st.push(cur);
                cur = cur->left;
            } else {
                cur = st.top();
                st.pop();
                result.push_back(cur->val);
                cur = cur->right;
            }
        }
    }

    void inorder_morris(TreeNode *root, vector<int>& result) {
        TreeNode *cur = root;

        while (cur != NULL) {
            if (cur->left == NULL) {
                // no left child, store this in result and go right;
                result.push_back(cur->val);
                cur = cur->right;
            } else {
                // if left child is not null, find inorder predecessor of cur
                // (rightmost node in left subtree)
                TreeNode *pred = cur->left;
                while (pred->right != NULL && pred->right != cur)
                    pred = pred->right;

                // if predecessor's right child is NULL, make cur to right child and go left
                if (pred->right == NULL) {
                    pred->right = cur;
                    cur = cur->left;
                } else {
                    // revert changes
                    pred->right = NULL;
                    //result.push_back(cur->val);
                    cur = cur->right;
                }
            }
        }
    }

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        //inorder(root, result);
        inorder_iterative(root, result);
        //inorder_morris(root, result);

        return result;        
    }
};

