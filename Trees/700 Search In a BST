/*
https://leetcode.com/problems/search-in-a-binary-search-tree/description/?envType=problem-list-v2&envId=tree

You are given the root of a binary search tree (BST) and an integer val.
Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Input: root = [4,2,7,1,3], val = 5
Output: []
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST_recursive(TreeNode* root, int val) {
        if (root == NULL)
            return NULL;

        if (val == root->val)
            return root;

        if (val < root->val)
            return searchBST(root->left, val);

        if (val > root->val)
            return searchBST(root->right, val);

        return NULL;        
    }

    TreeNode* searchBST_iterative(TreeNode* root, int val) {
        if (root == NULL)
            return NULL;

        while (root) {
            if (val == root->val)
                return root;

            if (val < root->val)
                root = root->left;
            else
                root = root->right;
        }
        return NULL;
    }

    TreeNode* searchBST(TreeNode* root, int val) {
        //return searchBST_recursive(root, val);
        return searchBST_iterative(root, val);
    }
};


 
