/*
https://leetcode.com/problems/path-sum-ii/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. 
Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Input: root = [1,2,3], targetSum = 5
Output: []

Input: root = [1,2], targetSum = 0
Output: []
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void pathSum_util(TreeNode *root, int targetSum, int cur_sum, vector<int>&temp, vector<vector<int>>& result) {
        if (root == NULL)
            return;

        cur_sum += root->val;
        temp.push_back(root->val);
        if (root->left == NULL && root->right == NULL && cur_sum == targetSum)
            result.push_back(temp);

        pathSum_util(root->left, targetSum, cur_sum, temp, result);
        pathSum_util(root->right, targetSum, cur_sum, temp, result);
        temp.pop_back();    
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        vector<int> temp;
        int sum = 0;

        pathSum_util(root, targetSum, sum, temp, result);

        return result;        
    }
};
