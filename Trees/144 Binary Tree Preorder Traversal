/*
https://leetcode.com/problems/binary-tree-preorder-traversal/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [1,2,4,5,6,7,3,8,9]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(TreeNode *root, vector<int>& result) {
        if (root) {
            result.push_back(root->val);
            preorder(root->left, result);
            preorder(root->right, result);
        }
    }

    void preorder_iterative(TreeNode *root, vector<int>& result) {
        if (root == NULL)
            return;
        
        stack<TreeNode *> st;
        st.push(root);

        while (!st.empty()) {
            TreeNode *node = st.top();
            st.pop();
            result.push_back(node->val);
            if (node->right)
                st.push(node->right);
            if (node->left)
                st.push(node->left);
        }
    }

    void preorder_morris(TreeNode *root, vector<int>& result) {
        if (root == NULL)
            return;

        TreeNode *cur = root;
        while (cur) {
            if (cur->left == NULL) {
                result.push_back(cur->val);
                cur = cur->right;
            } else {
                TreeNode *prev = cur->left;
                while (prev->right != NULL && prev->right != cur)
                    prev = prev->right;

                if (prev->right == NULL) {
                    prev->right = cur;
                    result.push_back(cur->val);
                    cur = cur->left;
                } else {
                    prev->right = NULL;
                    cur = cur->right;
                }
            }
        }
    }

    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        //preorder(root, result);
        preorder_iterative(root, result);
        //preorder_morris(root, result);
        return result;        
    }
};
