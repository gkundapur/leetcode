/*
https://leetcode.com/problems/binary-tree-maximum-path-sum/description/?envType=problem-list-v2&envId=tree

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. 
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;

    int findmaxPathSum(TreeNode *root, int& res) {
        if (root == NULL)
            return 0;

        int lsum = max(findmaxPathSum(root->left, res), 0);
        int rsum = max(findmaxPathSum(root->right, res), 0);

        res = max(res, lsum + rsum + root->val);

        return max(lsum, rsum) + root->val;
    }

    int findmaxPathSum_1(TreeNode *root) {
        if (root == NULL)
            return 0;

        int lsum = findmaxPathSum_1(root->left);
        int rsum = findmaxPathSum_1(root->right);

        int full_path = root->val + lsum + rsum;
        int lsum_or_rsum = max(lsum, rsum) + root->val;

        ans = max({ans, root->val, lsum_or_rsum, full_path});

        return max(root->val, lsum_or_rsum);
    }

    int maxPathSum(TreeNode* root) {
        //int res = INT_MIN;

        //findmaxPathSum(root, res);
        //return res;

        ans = INT_MIN;
        findmaxPathSum(root);
        return ans;
    }
};
