/*
https://leetcode.com/problems/find-largest-value-in-each-tree-row/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

Input: root = [1,2,3]
Output: [1,3]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues_bfs(TreeNode *root) {
        vector<int> result;

        if (root == NULL)
            return result;

        queue<TreeNode *> que;
        que.push(root);
        while (!que.empty()) {
            int n = que.size();
            int maxValue = INT_MIN;
            while (n--) {
                TreeNode *node = que.front();
                que.pop();

                maxValue = max(maxValue, node->val);
                
                if (node->left)
                    que.push(node->left);
                if (node->right)
                    que.push(node->right);
            }
            result.push_back(maxValue);
        }
        return result;
    }

    void largestValues_dfs(TreeNode *root, int row, vector<int>& result) {
        if (root == NULL)
            return;

        if (row == result.size()) // root is max at row 0
            result.push_back(root->val);
        else 
            result[row] = max(result[row], root->val);

        largestValues_dfs(root->left, row+1, result);
        largestValues_dfs(root->right, row+1, result);
    }

    vector<int> largestValues(TreeNode* root) {
        vector <int> result;
        //result = largestValues_bfs(root);
        largestValues_dfs(root, 0, result);
        return result;        
    }
};
