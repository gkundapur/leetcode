/*
https://leetcode.com/problems/binary-tree-right-side-view/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom

Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Input: root = [1,2,3,4,null,null,null,5]
Output: [1,3,4,5]

Input: root = [1,null,3]
Output: [1,3]

Input: root = []
Output: []
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void bfs(TreeNode *root, vector<int>& result) {
        if (root == NULL)
            return;

        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty()) {
            int n = q.size();
            while (n--) {
                root = q.front();
                q.pop();

                if (root->left)
                    q.push(root->left);
                if (root->right)
                    q.push(root->right);
            }
            result.push_back(root->val);
        }        
    }
    
    void dfs(TreeNode *root, int lvl, vector<int>& result) {
        if (root == NULL)
            return;

        if (result.size() < lvl)
            result.push_back(root->val);

        dfs(root->right, lvl+1, result);
        dfs(root->left, lvl+1, result);
    }

    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        //bfs(root, result);
        dfs(root, 1, result);
        return result;
    }
};
