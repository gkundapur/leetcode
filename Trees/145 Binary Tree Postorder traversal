/*
https://leetcode.com/problems/binary-tree-postorder-traversal/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, return the postorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,6,7,5,2,9,8,3,1]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void postorder(TreeNode *root, vector<int>& result) {
        if (root) {
            postorder(root->left, result);
            postorder(root->right, result);
            result.push_back(root->val);
        }
    }

    void postorder_using_one_stack(TreeNode* root, vector<int>& result) {
        if (root == NULL)
            return;

        stack<TreeNode *> st;
        TreeNode *cur = root;
        TreeNode *prev = NULL;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) {
                st.push(cur);
                cur = cur->left;
            } else {
                cur = st.top();
                if (cur->right == NULL || cur->right == prev) {
                    st.pop();
                    result.push_back(cur->val);
                    prev = cur;
                    cur = NULL;
                } else
                    cur = cur->right;
            }
        }
    }

    void postorder_using_two_stacks(TreeNode* root, vector<int>& result) {
        if (root == NULL)
            return;

        stack<TreeNode *> st1, st2;
        st1.push(root);
        while (!st1.empty()) {
            TreeNode *node = st1.top();
            st1.pop();
            st2.push(node);

            if (node->left)
                st1.push(node->left);
            if (node->right)
                st1.push(node->right);
        }
        while (!st2.empty()) {
            TreeNode *node = st2.top();
            st2.pop();
            result.push_back(node->val);
        }
    }

    void postorder_morris(TreeNode* root, vector<int>& result) {
        if (root == NULL)
            return;

        TreeNode* cur = root;
        while (cur != NULL) {            
            if (cur->right == NULL) {
                result.push_back(cur->val);
                cur = cur->left;
            }
            else {
                TreeNode* prev = cur->right;
                while (prev->left != NULL && prev->left != cur)
                    prev = prev->left;
                
                if (prev->left == NULL) {
                    result.push_back(cur->val);
                    prev->left = cur;
                    cur = cur->right;
                }
                // If the left child of inorder predecessor
                // already points to this node
                else {
                    prev->left = NULL;
                    cur = cur->left;
                }
            }
        }
        // reverse the res
        reverse(result.begin(), result.end());        
    }
 
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> result;
        //postorder(root, result);
        //postorder_using_one_stack(root, result);
        //postorder_using_two_stacks(root, result);
        postorder_morris(root, result);        
        return result;        
    }
};
