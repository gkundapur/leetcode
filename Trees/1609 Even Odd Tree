/*
https://leetcode.com/problems/even-odd-tree/description/?envType=problem-list-v2&envId=tree

A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.

Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.

Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree_bfs(TreeNode *root) {
        queue<TreeNode *> q;
        bool even_lvl = true;
        int prev;

        q.push(root); 
        while (!q.empty()) {
            int n = q.size();            

            if (even_lvl)
                prev = INT_MIN;  // strictly increasing
            else
                prev = INT_MAX;  // strictly decreasing

            while (n--) {
                TreeNode *node = q.front();
                q.pop();

                if (even_lvl/* even level */ && 
                    (node->val % 2 == 0 /* if it's even */ || 
                    node->val <= prev /* if in descending order*/))
                    return false;

                if (!even_lvl /* level is odd */ &&
                    (node->val % 2 != 0 /* if it's odd */ ||
                    node->val >= prev /* if it's in ascending order*/))
                    return false;

                prev = node->val;

                if (node->left)
                    q.push(node->left);

                if (node->right)
                    q.push(node->right);               
            }
            even_lvl = !even_lvl;
        }
        return true;
    }

    bool isEvenOddTree(TreeNode* root) {
        return isEvenOddTree_bfs(root);        
    }
};
