/*
https://leetcode.com/problems/minimum-absolute-difference-in-bst/description/?envType=problem-list-v2&envId=tree

Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

Input: root = [4,2,6,1,3]
Output: 1

Input: root = [1,0,48,null,null,12,49]
Output: 1
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findMinDiff(TreeNode *root) {
        int minDiff = INT_MAX;
        stack<TreeNode *> st;
        TreeNode *cur, *prev;

        cur = root;
        prev = NULL;
        while (cur != NULL || !st.empty()) {
            if (cur != NULL) {
                st.push(cur);
                cur = cur->left;
            } else {
                cur = st.top();
                st.pop();
                if (prev != NULL)
                    minDiff = min(minDiff, cur->val - prev->val);
                prev = cur;
                cur = cur->right;
            }
        }
        
        return minDiff;
    }

    int minDiff = INT_MAX;
    //TreeNode *prev = NULL;
    int findMinDiff_rec(TreeNode *root, TreeNode *& prev) {
        if (root == NULL)
            return minDiff;

        findMinDiff_rec(root->left, prev);
        if (prev != NULL)
            minDiff = min(minDiff, root->val - prev->val);
        prev = root;
        findMinDiff_rec(root->right, prev);
        return minDiff;        
    }

    int getMinimumDifference(TreeNode* root) {
        //return findMinDiff(root);

        TreeNode *prev = NULL;
        return findMinDiff_rec(root, prev);
        
    }
};
