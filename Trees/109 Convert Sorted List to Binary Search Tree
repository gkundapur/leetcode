/*
https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/?envType=problem-list-v2&envId=tree

Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Input: head = []
Output: []
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    ListNode *get_ll_mid_point(ListNode *head, ListNode **prevMid) {
        ListNode *slowPtr, *fastPtr, *prev_slowPtr;

        slowPtr = fastPtr = head;
        prev_slowPtr = NULL;
        while (fastPtr && fastPtr->next) {
            prev_slowPtr = slowPtr;
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
        }
        *prevMid = prev_slowPtr;
        return slowPtr;
    }

    TreeNode* sortedListToBST_1(ListNode *head) {
        if(head == NULL) // Empty list
            return NULL;
        
        if(head->next == NULL)  // list with only one node
            return new TreeNode(head->val);

        ListNode *mid, *prevMid;
        mid = get_ll_mid_point(head, &prevMid);

        TreeNode *root = new TreeNode(mid->val);
        prevMid->next = NULL;

        root->left =  sortedListToBST(head);
        root->right = sortedListToBST(mid->next);

        return root;
    }    

    TreeNode* sortedListToBST(ListNode* head) {
        return sortedListToBST_1(head);
    }
};
