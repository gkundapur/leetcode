/*
https://leetcode.com/problems/minimum-depth-of-binary-tree/description/?envType=problem-list-v2&envId=tree

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Input: root = [3,9,20,null,null,15,7]
Output: 2

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //-----------------------------------------------------------------------------------------------------------------------------
    int minDepth_bfs(TreeNode *root) {
        if (root == NULL)
            return 0;

        if (root->left == NULL && root->right == NULL)
            return 1;

        int depth = 1;
        queue<TreeNode *> que;
        que.push(root);
        while (!que.empty()) {
            int n = que.size();
            while (n--) {
                TreeNode *node = que.front();
                que.pop();

                if (node->left == NULL && node->right == NULL)
                    return depth;

                if (node->left)
                    que.push(node->left);
                if (node->right)
                    que.push(node->right);
            }
            depth++;
        }
        return -1;
    }

    //-----------------------------------------------------------------------------------------------------------------------------
    int minDepth_dfs(TreeNode *root) {
        if (root == NULL)
            return 0;

        if (root->left == NULL && root->right == NULL)
            return 1;

        int leftDepth = root->left ? minDepth_dfs(root->left) : INT_MAX;
        int rightDepth = root->right ? minDepth_dfs(root->right) : INT_MAX;

        return 1 + min(leftDepth, rightDepth);        
    }

    //----------------------------------------MAIN---------------------------------------------------------------------------------
    int minDepth(TreeNode* root) {
        return minDepth_bfs(root);
        //return minDepth_dfs(root);
    }
};
