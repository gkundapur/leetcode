/*
https://leetcode.com/problems/validate-binary-search-tree/description/?envType=problem-list-v2&envId=tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Input: root = [2,1,3]
Output: true

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST_Util(TreeNode *root, TreeNode *min, TreeNode *max) {
        if (root == NULL)
            return true;

        if ((min && root->val <= min->val) ||
            (max && root->val >= max->val))
            return false;
        return isValidBST_Util(root->left, min, root) && isValidBST_Util(root->right, root, max);       
    }

    bool isValidBST_Util_inorder(TreeNode *root, TreeNode **prev) {
        if (root == NULL)
            return true;

        if (isValidBST_Util_inorder(root->left, prev) == false)
            return false;

        if (*prev && (*prev)->val >= root->val)
            return false;

        *prev = root;
        return isValidBST_Util_inorder(root->right, prev);
    }
   
    bool isValidBST_inorder(TreeNode *root) {
        TreeNode *prev = NULL;
        return isValidBST_Util_inorder(root, &prev);
    }

    bool isValidBST_using_stack(TreeNode *root) {
        stack<TreeNode *> st;
        TreeNode *cur = root;
        TreeNode *prev = NULL;

        while (cur || !st.empty()) {
            if (cur) {
                st.push(cur);
                cur = cur->left;
            } else {
                cur = st.top();
                st.pop();
                if (prev && prev->val >= cur->val)
                    return false;
                prev = cur;
                cur = cur->right;
            }
        }
        return true;
    }
    bool isValidBST(TreeNode* root) {
        //return isValidBST_Util(root, NULL, NULL);
        //return isValidBST_inorder(root);
        return isValidBST_using_stack(root);
    }
};
