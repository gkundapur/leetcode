/*
https://leetcode.com/problems/add-two-numbers-ii/description/?envType=problem-list-v2&envId=linked-list

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]

Input: l1 = [0], l2 = [0]
Output: [0]
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int findLLlen(ListNode *head) {
        int count = 0;

        while (head) {
            count++;
            head = head->next;
        }
        return count;
    }

    ListNode *reverse(ListNode *head) {
        ListNode *newHead, *cur, *next;

        newHead = NULL;
        cur = head;
        while (cur) {
            next = cur->next;
            cur->next = newHead;
            newHead = cur;
            cur = next;
        }
        return newHead;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if (l1 == NULL && l2 == NULL)
            return NULL;

        if (l1 != NULL && l2 == NULL)
            return l1;

        if (l2 != NULL && l1 == NULL)
            return l2;

        int nl1 = findLLlen(l1);
        int nl2 = findLLlen(l2);
        ListNode *ll1 = l1;
        ListNode *ll2 = l2;
        ListNode *head = NULL;
        int sum = 0;

        while (nl1 && nl2) {
            if (nl1 == nl2) {
                sum = ll1->val + ll2->val;
                ll1 = ll1->next;
                ll2 = ll2->next;
                nl1--;
                nl2--;
            } else if (nl1 > nl2) {
                sum = ll1->val;
                ll1 = ll1->next;
                nl1--;
            } else if (nl1 < nl2) {
                sum = ll2->val;
                ll2 = ll2->next;
                nl2--;
            }
            
            //cout << "sum = " << sum << endl;
            ListNode *temp = new ListNode(sum);
            temp->next = head;
            head = temp;

        }

        ListNode *cur = head;
        ListNode *prev = NULL;
        int carry = 0;
        while (cur) {
            //cout << "cur->val = " << cur->val << endl;
            int digit = (cur->val + carry) % 10;
            carry = (cur->val + carry) / 10;
            cur->val = digit;
            prev = cur;
            cur = cur->next;
        }
        
        if (carry)
            prev->next = new ListNode(carry);

        head = reverse(head);
        return head;      
    }
};

