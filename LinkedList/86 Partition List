/*
https://leetcode.com/problems/partition-list/description/?envType=problem-list-v2&envId=linked-list

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *smallerthanx = new ListNode(0);
        ListNode *greateroreqx = new ListNode(0);
        ListNode *smallx = smallerthanx;
        ListNode *largex = greateroreqx;

        while (head) {
            if (head->val < x) {
                smallx->next = head;
                smallx = smallx->next;
            } else {
                largex->next = head;
                largex = largex->next;
            }
            head = head->next;
        }
        smallx->next = greateroreqx->next;
        largex->next = NULL;

        ListNode *temp = smallerthanx->next;
        
        delete smallerthanx;
        delete greateroreqx;
        return temp;
        
    }
};
