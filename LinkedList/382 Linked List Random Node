/*
https://leetcode.com/problems/linked-list-random-node/description/?envType=problem-list-v2&envId=linked-list

Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Implement the Solution class:

Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.

Input
["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    ListNode *head;
    Solution(ListNode* head) {
    #if 0
        ListNode *cur = head;
        while (cur) {
            res.push_back(cur->val);
            cur = cur->next;
        }
    #endif
        this->head = head;
        
    }
    
    int getRandom() {
        //return res[rand() % res.size()];
        int count = 0, result;
        ListNode *temp = head;
        while (temp) {
            count++;
            //int dice = 1 + rand() % count;
            //if (dice == count)
            //    result = temp->val;
            //if (rand() % count <= 1 / count) // reservoir sampling theorem
            if (rand() % count == 0)
                result = temp->val;
            temp = temp->next;
        }
        return result;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(head);
 * int param_1 = obj->getRandom();
 */
 
