/*
https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/?envType=problem-list-v2&envId=linked-list

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates_1(ListNode *head) {
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* prev = dummy;
        ListNode* cur = head;

        while (cur) {
            while (cur->next && cur->val == cur->next->val)
                cur = cur->next;
            if (prev->next = cur) 
                prev = prev->next;
            else
                prev->next = cur->next;
            cur = cur->next;
        }
        return dummy->next;
    }

    ListNode* deleteDuplicates(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode *cur = head;

        while (cur && cur->next) {
            if (cur->val == cur->next->val) {
                ListNode *temp = cur->next;
                cur->next = cur->next->next;
            } else
                cur = cur->next;
        }
        return head;  
    }
};
