/*
https://leetcode.com/problems/double-a-number-represented-as-a-linked-list/description/?envType=problem-list-v2&envId=linked-list

You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.

Return the head of the linked list after doubling it.

Input: head = [1,8,9]
Output: [3,7,8]
Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.

Input: head = [9,9,9]
Output: [1,9,9,8]
Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    //-----------------------------------------------------------------------------------------------------
    int doubleItUtility(ListNode *head) {
        if (head == NULL)
            return 0;

        int carry = doubleItUtility(head->next);
        int value = head->val * 2 + carry;
        head->val = value % 10;
        return value / 10;
    }

    ListNode* doubleIt_approach1(ListNode* head) {
        int lastcarry = doubleItUtility(head);
        if (lastcarry) {
            ListNode *newnode = new ListNode(lastcarry);
            newnode->next = head;
            head = newnode;
        }
        return head;        

    }

    //-----------------------------------------------------------------------------------------------------
    ListNode* doubleIt_approach2(ListNode* head) {
        ListNode *cur = head;
        ListNode *prev = NULL;

        while (cur) {
            int val = cur->val * 2;
            cur->val = val % 10;
            int carry = val / 10;
            if (carry) {
                if (prev == NULL) {
                    prev = new ListNode(carry);
                    prev->next = head;
                    head = prev;
                } else {
                    prev->val += carry;
                }
            }
            prev = cur;
            cur = cur->next;
        }
        return head;
    }

    //-----------------------------------------------------------------------------------------------------
    ListNode *doubleIt_approach3(ListNode *head) {
        if (head == NULL)
            return head;

        if (head->val >= 5) {
            ListNode *temp = new ListNode(0);
            temp->next = head;
            head = temp;
        }

        ListNode *cur = head;
        while (cur) {
            int val = cur->val * 2;
            cur->val = val % 10;
            if (cur->next && cur->next->val >= 5)
                cur->val += 1;
            cur = cur->next;
        }
        return head;
    }

    //-----------------------------------------------------------------------------------------------------
    ListNode *doubleIt_using_stack(ListNode *head) {
        if (head == NULL)
            return head;

        stack<ListNode *> st;
        ListNode *cur = head;
        while (cur) {
            st.push(cur);
            cur = cur->next;
        }

        int carry = 0;
        while (!st.empty()) {
            cur = st.top();
            st.top();

            int val = cur->val * 2 + carry;
            cur->val = val % 10;
            carry = val / 10;
        }

        if (carry) {
            ListNode *newhead = new ListNode(carry);
            newhead->next = head;
            head = newhead;
        }
        return head;        
    }

    ListNode* doubleIt(ListNode* head) {
        //return doubleIt_approach1(head);
        //return doubleIt_approach2(head);
        return doubleIt_approach3(head);
        //return doubleIt_using_stack(head);
    }
};

