/*
https://leetcode.com/problems/palindrome-linked-list/description/?envType=problem-list-v2&envId=linked-list

Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *cur; // for approach 4
//-----------------------Approach 1------------------------------------------------
    // Time: O(n), space: O(n)
    bool isPalindrome_approach1(ListNode *head) {
        if (head == NULL)
            return false;

        if (head->next == NULL)
            return true;

        vector<int> vec;

        while (head) {
            vec.push_back(head->val);
            head = head->next;
        }

        int i = 0;
        int j = vec.size()-1;
        while (i < j) {
            if (vec[i] != vec[j])
                return false;
            i++;
            j--;
        }

        return true;
    }

//-----------------------Approach 2------------------------------------------------
    ListNode *reverse(ListNode *head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode *newHead = reverse(head->next);
        head->next->next = head;
        head->next = NULL;

        return newHead;
    }

    // Time: O(n), space: O(1) - no auxillary space
    bool isPalindrome_approach2(ListNode* head) {
        if (head == NULL)
            return false;

        if (head->next == NULL)
            return true;

        // find middle node, reverse from mid to end    
        ListNode *slowPtr = head;
        ListNode *fastPtr = head;
        ListNode *prev_slowPtr = NULL;

        while (fastPtr && fastPtr->next) {
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
        }

        ListNode *mid = reverse(slowPtr);
        while (mid) {
            if (head->val != mid->val)
                return false;
            head = head->next;
            mid = mid->next;
        }
        return true;
    }

//-----------------------Approach 3------------------------------------------------
    // reverse 1st half while finding mid point
    bool isPalindrome_approach3(ListNode* head) {
        if (head == NULL)
            return false;

        if (head->next == NULL)
            return true;

        // find middle node, reverse from mid to end    
        ListNode *slowPtr = head;
        ListNode *fastPtr = head;
        ListNode *prev_slowPtr = NULL;

        while (fastPtr && fastPtr->next) {
            //slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
            ListNode *temp = slowPtr->next;
            slowPtr->next = prev_slowPtr;
            prev_slowPtr = slowPtr;
            slowPtr = temp;            
        }

        //ListNode *mid = reverse(slowPtr);
        if (fastPtr)
            slowPtr = slowPtr->next;

        while (prev_slowPtr && slowPtr) {
            if (prev_slowPtr->val != slowPtr->val)
                return false;
            prev_slowPtr = prev_slowPtr->next;
            slowPtr = slowPtr->next;
        }
        return true;
    }

//-----------------------Approach 4------------------------------------------------
    // without reversing, compare with the head of the list while recursion is unwinding
    bool isPalindrome_approach4(ListNode* head) {
        if (head == NULL)
            return true;

        bool ans = isPalindrome_approach4(head->next);
        //recursion rewinding
        if (head->val != cur->val)
            return false;
        cur = cur->next;
        return ans;           

    }
    
    bool isPalindrome(ListNode* head) {
        //return isPalindrome_approach1(head);
        //return isPalindrome_approach2(head);
        //return isPalindrome_approach3(head);

        cur = head;
        return isPalindrome_approach4(head);
        
    }
};
