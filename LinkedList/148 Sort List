/*
https://leetcode.com/problems/sort-list/description/?envType=problem-list-v2&envId=linked-list

Given the head of a linked list, return the list after sorting it in ascending order.

Input: head = [4,2,1,3]
Output: [1,2,3,4]

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Input: head = []
Output: []
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode *merge(ListNode *l1, ListNode *l2) {
        ListNode *result = NULL;

        if (l1 == NULL)
            return l2;

        if (l2 == NULL)
            return l1;

        if (l1->val < l2->val) {
            result = l1;
            result->next = merge(l1->next, l2);
        } else {
            result = l2;
            result->next = merge(l1, l2->next);
        }
        return result;
    }
    
    ListNode* sortList(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode *prevslowPtr = NULL;
        ListNode *slowPtr = head;
        ListNode *fastPtr = head;
        while (fastPtr && fastPtr->next) {
            prevslowPtr = slowPtr;
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
        }
        ListNode *mid = slowPtr;
        prevslowPtr->next = NULL;

        ListNode *left = sortList(head);
        ListNode *right = sortList(mid);
        return merge(left, right);        
    }
};
