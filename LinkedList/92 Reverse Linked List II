/*
https://leetcode.com/problems/reverse-linked-list-ii/description/?envType=problem-list-v2&envId=linked-list

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverse(ListNode *head, int count, ListNode **afterRightNode)
    {
        ListNode *prev, *cur, *next;

        prev = NULL;
        cur = head;
        while (count) {
            next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
            count--;
        }

        *afterRightNode = next;
        return prev;
    }

    ListNode* reverseBetween_approach1(ListNode* head, int left, int right) {
        if (head == NULL || head->next == NULL || left == right)
            return head;

        ListNode *leftNode = head;
        ListNode *prevLeftNode = NULL;
        for (int i = 1; i< left; i++) {
            prevLeftNode = leftNode;
            leftNode = leftNode->next;            
        }

        ListNode *rightNode, *afterRightNode;
        rightNode = reverse(leftNode, right-left+1, &afterRightNode);
        if (prevLeftNode)
            prevLeftNode->next = rightNode;
        else
            head = rightNode;
        leftNode->next = afterRightNode;

        return head;            
    }

    ListNode* reverseBetween_approach2(ListNode* head, int left, int right) {
        if (head == NULL || head->next == NULL || left == right)
            return head;

        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        ListNode *prev = dummy;

        for (int i = 1; i < left; i++)
            prev = prev->next;

        ListNode *cur = prev->next;
        for (int i = 1; i <= right - left; i++) {
            ListNode *temp = prev->next;
            prev->next = cur->next;
            cur->next = cur->next->next;
            prev->next->next = temp;
        }
        return dummy->next;
    }

    ListNode* reverseBetween(ListNode* head, int left, int right) {
        return reverseBetween_approach1(head, left, right);  
        //return reverseBetween_approach1(head, left, right);
    }
};
