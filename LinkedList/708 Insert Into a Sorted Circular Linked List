/*
Given a random node of a circular linked list sorted in ascending order, insert a value
into the list such that it remains a sorted circular list
*/

Input: [1, 3, 4, 8], head = 3, key = 6
output: [1, 3, 4, 6, 8]
*/

/*
// Definition for a circular singly-linked list Node.
class Node {
public:
    int val;      // Value of the node
    Node* next;   // Pointer to the next node

    Node() {}

    Node(int value) {
        val = value;
        next = nullptr;
    }

    Node(int value, Node* nextNode) {
        val = value;
        next = nextNode;
    }
};
*/

class Solution {
    Node* insert(Node head, int insertVal) {
        Node* newNode = new Node(insertVal);
        if (head == null) {
            newNode->next = newNode;
            return newNode;
        }
        Node* cur = head;
        Node* nextNode = head->next;
        while (nextNode != head) {
            if ((insertVal >= cur->val && insertVal <= nextNode->val) || 
                (insertVal < cur->val && cur->val > nextNode->val)  || 
                (insertVal > curr->val && cur->val > nextNode->val)) {                
                break;
            }
            cur = nextNode;
            nextNode = nextNode->next;
        }
        cur->next = newNode;
        newNode->next = nextNode;
        return head;
    }
};
