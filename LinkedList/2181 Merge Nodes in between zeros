/*
https://leetcode.com/problems/merge-nodes-in-between-zeros/description/?envType=problem-list-v2&envId=linked-list

You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.

Input: head = [0,1,0,3,0,2,2,0]
Output: [1,3,4]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 1 = 1.
- The sum of the nodes marked in red: 3 = 3.
- The sum of the nodes marked in yellow: 2 + 2 = 4.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeNodes_1(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode *p1 = head->next;
        ListNode *p2 = p1;
        while (p2 != NULL) {
            int sum = 0;
            while (p2 != NULL && p2->val != 0) {
                sum += p2->val;
                p2 = p2->next;
            }
            p1->val = sum;
            p2 = p2->next;        
            // delete nodes from p1->next till p2
            ListNode *temp = p1->next;
            while (temp != p2) {
                ListNode *todelete = temp;
                temp = temp->next;
                delete todelete;
            }
            p1->next = p2;
            p1 = p2;
        }
        return head->next;
    }

    ListNode* mergeNodes_2(ListNode* head) {
        if (head == NULL)
            return head;

        head = head->next;
        if (head == NULL)
            return head;

        ListNode *temp = head;
        int sum = 0;
        while (temp != NULL && temp->val != 0) {
            sum += temp->val;
            temp = temp->next;
        }
        head->val = sum;
        // delete nodes from head->next to temp
        head->next = mergeNodes_2(temp);
        return head;
    }
    
    ListNode* mergeNodes(ListNode* head) {
        //return mergeNodes_1(head);
        return mergeNodes_2(head); 
    }
};
