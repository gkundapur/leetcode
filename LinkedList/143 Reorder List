/*
https://leetcode.com/problems/reorder-list/description/?envType=problem-list-v2&envId=linked-list

You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *cur; // for approach 2

//----------------------------Approach 1------------------------------------------------------
    ListNode *reverse(ListNode *head) {
        if (head == NULL || head->next == NULL)
            return head;

        ListNode *newHead = reverse(head->next);
        head->next->next = head;
        head->next = NULL;

        return newHead;
    }
    // find mid point, reverse mid to end and connect
    void reorderList_approach1(ListNode* head) {
        ListNode *slowPtr = head;
        ListNode *fastPtr = head;

        while (fastPtr && fastPtr->next) {
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
        }

        ListNode *revHead = reverse(slowPtr);

        ListNode *cur = head;
        while (revHead->next) {
            ListNode *curNext = cur->next;
            cur->next = revHead;
            ListNode *revHeadNext = revHead->next;
            revHead->next = curNext;
            cur = curNext;
            revHead = revHeadNext;
        }
    }

//----------------------------Approach 2------------------------------------------------------
    void reorderList_approach2(ListNode* head) {
        if (head == NULL)
            return;

        reorderList_approach2(head->next);

        ListNode *curNext = cur->next;        
        if (head == cur) {
            cur->next = NULL;
            return;
        } else if (cur->next == NULL)
            return;        

        cur->next = head;
        head->next = curNext == head ? NULL : curNext;
        cur = curNext;
    }
        
    void reorderList(ListNode* head) {
        //reorderList_approach1(head);
        cur = head;
        reorderList_approach2(head);
        
    }
};
