/*
https://leetcode.com/problems/reverse-nodes-in-k-group/description/?envType=problem-list-v2&envId=linked-list
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int findLLlen(ListNode *head) {
        int len = 0;
        while (head) {
            ++len;
            head = head->next;
        }
        return len;
    }
    
    ListNode *reverse(ListNode *head, int count, ListNode **afterRight) {
        ListNode *prev, *cur, *next;

        prev = NULL;
        cur = head;
        while (count) {
            next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
            count--;
        }
        *afterRight = next;
        return prev;
    }

    ListNode *reverseGroup_1(ListNode *head, int k) {
        if (head == NULL || k == 1)
        return head;

        int len = findLLlen(head);
        ListNode *leftNode, *prevLeft;

        prevLeft = NULL;
        leftNode = head;

        for (int i = 0; i < len/k; i++) {
            ListNode *rightNode, *afterRight;

            rightNode = reverse(leftNode, k, &afterRight);
            if (i == 0)
                head = rightNode;
            else
                prevLeft->next = rightNode;

            leftNode->next = afterRight;

            prevLeft = leftNode;
            leftNode = afterRight;
        }
        return head;        
    }

    ListNode *reverse_2(ListNode *head, ListNode *kthNode) {
        ListNode *newhead = NULL;
        ListNode *cur = head;
        while (cur != kthNode) {
            ListNode *nextNode = cur->next;
            cur->next = newhead;
            newhead = cur;
            cur = nextNode;
        }
        return newhead;
    }

    void printlist(ListNode *head) {
        cout << "reversed list from: " << head->val << "---->";
        while (head) {
            cout << head->val << " ";
            head = head->next;
        }
        cout << endl;
    }

    ListNode *reverseGroup_2(ListNode *head, int k) {
        if (head == NULL || k == 1)
            return head;

        ListNode *kthNode = head;
        for (int i = 0; i < k; i++) {
            if (kthNode == NULL)
                return head;
            kthNode = kthNode->next;
        }
        cout << "kthNode->val = " << kthNode->val << endl;
        ListNode *newHead = reverse_2(head, kthNode);
        printlist(newHead);
        head->next = reverseGroup_2(kthNode, k);
        return newHead;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
        //return reverseGroup_1(head, k);
        return reverseGroup_2(head, k);
    }
};
