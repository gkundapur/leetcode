/*
https://leetcode.com/problems/trapping-rain-water/description/?envType=problem-list-v2&envId=array

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Input: height = [4,2,0,3,2,5]
Output: 9
*/

class Solution {
public:
    int trap1(vector<int>& height) {
        int n = height.size();
        if (n == 0)
            return 0;

        vector<int> left_max(n);
        vector<int> right_max(n);

        left_max[0] = height[0];
        for (int i = 1; i < n; i++)
            left_max[i] = max(left_max[i-1], height[i]);

        right_max[n-1] = height[n-1];
        for (int i = n-2; i >= 0; i--)
            right_max[i] = max(right_max[i+1], height[i]);

        int trapped_water = 0;
        for (int i = 0; i < n; i++)
            trapped_water += min(left_max[i], right_max[i]) - height[i];

        return trapped_water;
    }

    int trap2(vector<int>& height) {
        int left = 0;
        int right = height.size() - 1;
        int leftmax = 0, rightmax = 0;
        int trapped_water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                leftmax = max(leftmax, height[left]);
                trapped_water += (leftmax - height[left]);
                left++;
            } else {
                rightmax = max(rightmax, height[right]);
                trapped_water += (rightmax - height[right]);
                right--;
            }
        }
        return trapped_water;
    }

    int trap_water_stack(vector<int>& height) {
        int n = height.size();
        int trapped_water = 0;
        stack<int> st;
        //st.push(0);
    
        //for (int i = 1; i < n; i++) {
        for (int i = 0; i < n; i++) {
            while (!st.empty() && height[i] > height[st.top()]) {
                int mid = st.top();
                st.pop();
    
                if (st.empty())
                    break;
    
                int right = i;
                int left = st.top();
    
                int h = min(height[right], height[left]) - height[mid];
                int w = right - left - 1;
    
                trapped_water += (h * w);
            }
            st.push(i);
        }
        return trapped_water;
    }

    int trap(vector<int>& height) {
        return trap1(height);
        //return trap2(height);
        //return trap_water_stack(height);
    }
};
