/*
https://leetcode.com/problems/find-the-duplicate-number/description/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and using only constant extra space.

Input: nums = [1,3,4,2,2]
Output: 2

Input: nums = [3,1,3,4,2]
Output: 3

Input: nums = [3,3,3,3,3]
Output: 3
*/


class Solution {
public:
    int findDuplicate1(vector<int>& nums) {
        int n = nums.size();
        int l = 1;
        int r = n - 1;

        while (l < r) {
            int count = 0;
            int mid = l + (r - l) / 2;

            for (int i = 0; i < n; i++)
                if (nums[i] <= mid)
                    count++;
            
            if (count <= mid)
                l = mid + 1;
            else
                r = mid;
        }
        return l;        
    }

    int findDuplicate2(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Detect cycle
        slow = nums[slow];
        fast = nums[nums[fast]];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        
        slow = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }

    int findDuplicate(vector<int>& nums) {
        //return findDuplicate1(nums);
        return findDuplicate2(nums);
    }
};
