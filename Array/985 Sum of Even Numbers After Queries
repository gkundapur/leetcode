/*
https://leetcode.com/problems/sum-of-even-numbers-after-queries/description/?envType=problem-list-v2&envId=array

You are given an integer array nums and an array queries where queries[i] = [vali, indexi].
For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.
Return an integer array answer where answer[i] is the answer to the ith query.

Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: At the beginning, the array is [1,2,3,4].
After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.

Input: nums = [1], queries = [[4,0]]
Output: [0]
*/

class Solution {
public:
    int getEvenSum(vector<int>& nums, int index, int val) {
        nums[index] = nums[index] + val;

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] %2 == 0)
                sum += nums[i];
        }
        return sum;
    }

    vector<int> sumEvenAfterQueries_1(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> result;

        for (int i = 0; i < queries.size(); i++) {
            int val = queries[i][0];
            int index = queries[i][1];
            int sum = getEvenSum(nums, index, val);
            result.push_back(sum);            
        }
        return result;
    }

    vector<int> sumEvenAfterQueries_efficient(vector<int>& nums, vector<vector<int>>& queries) {
        // calculate sum of even elements in nums
        int evenSum = 0;
        for (int i = 0; i < nums.size(); i++)
            if (nums[i] % 2 == 0)
                evenSum += nums[i];

        vector<int> result;
        for (int i = 0; i < queries.size(); i++) {
            int val = queries[i][0];
            int index = queries[i][1];

            if (nums[index] % 2 == 0)
                evenSum -= nums[index];

            nums[index] = nums[index] + val;

            if (nums[index] % 2 == 0)
                evenSum += nums[index];

            result.push_back(evenSum);            
        }
        return result;
    }

    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {
        //return sumEvenAfterQueries_1(nums, queries);
        return sumEvenAfterQueries_efficient(nums, queries);
    }
};
