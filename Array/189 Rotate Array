/*
https://leetcode.com/problems/rotate-array/description/

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
*/

class Solution {
public:
    // O(n*k)
    void right_rotate_1(vector<int>& nums, int k) {
        int n = nums.size();
        
        k = k % n;

        while(k--) {
            int last = nums[n-1];            
            for (int i = n-1; i > 0; i--)
                nums[i] = nums[i-1];            

            nums[0] = last;            
        }
    }

    void right_rotate_2(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> res;

        k = k % n;
        for (int i = n-k; i < n; i++)
            res.push_back(nums[i]);

        for (int i = 0; i < n-k; i++)
            res.push_back(nums[i]);

        for (int i = 0; i < n; i++)
            nums[i] = res[i];
    }
    
    void right_rotate_3(vector<int>& nums, int k) {
        int n = nums.size();

        k = k % n;

        // reverse the entire array
        reverse(nums.begin(), nums.end());

        // reverse first k elements
        reverse(nums.begin(), nums.begin()+k);

        // reverse rest of the elements after k
        reverse(nums.begin()+k, nums.end());
    }

    void rotate(vector<int>& nums, int k) {
        //right_rotate_1(nums, k);    // gives TLE
        //right_rotate_2(nums, k);
        right_rotate_3(nums, k);    
    }
};
