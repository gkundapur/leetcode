/*
https://leetcode.com/problems/permutations/description/?envType=problem-list-v2&envId=array

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Input: nums = [0,1]
Output: [[0,1],[1,0]]

Input: nums = [1]
Output: [[1]]
*/

class Solution {
public:
    vector<vector<int>> result;
    unordered_set<int> st;
    int n;

    void dfs(vector<int>& nums, int left, int right) {
        if (left == right) {
            result.push_back(nums);
            return;
        }
        for (int i = left; i < right; i++) {
            swap(nums[left], nums[i]);
            dfs(nums, left+1, right);
            swap(nums[left], nums[i]);
        }
    }

    void dfs_1(vector<int>& nums, vector<int>& temp) {
        if (temp.size() == n) {
            result.push_back(temp);
            return;
        }

        for (int i = 0; i < n; i++) {
            if (st.find(nums[i]) == st.end()) {
                temp.push_back(nums[i]);
                st.insert(nums[i]);
                dfs_1(nums, temp);
                temp.pop_back();
                st.erase(nums[i]);
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        n = nums.size();
        //dfs(nums, 0, nums.size());

        vector<int> temp;
        dfs_1(nums, temp);
        return result;        
    }
};
