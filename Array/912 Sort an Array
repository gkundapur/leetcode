/*
https://leetcode.com/problems/sort-an-array/description/?envType=problem-list-v2&envId=array

Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.
*/

class Solution {
private:
    int partition(vector<int>& nums, int low, int high) {
        int pivot = nums[low];
        int i = low;
        int j = high;

        while (i < j) {
            while (i <= high && nums[i] <= pivot)
                i++;
            while (j >= low && nums[j] > pivot)
                j--;
            if (i < j)
                std::swap(nums[i], nums[j]);
        }
        std::swap(nums[low], nums[j]);
        return j;
    }

    int partition1(vector<int> &nums, int low, int high) {
        if (low >= high) 
            return -1;
        int pivot = low;
        int i = pivot + 1;
        int j = high;
        
        while (i <= j) {
            if (nums[i] < nums[pivot])
                i++;
            else if (nums[j] >= nums[pivot])
                j--;
            else 
                std::swap(nums[i], nums[j]);
        }
        std::swap(nums[pivot], nums[j]);
        return j;
    }

    void quick_sort(vector<int>& nums, int low, int high) {
        if (low < high) {
            int pIdx = partition(nums, low, high);
            quick_sort(nums, low, pIdx - 1);
            quick_sort(nums, pIdx+1, high);
        }
        //return nums;
    }
    
    void merge(std::vector<int>& arr, int left, int mid, int right) {
        int i, j, k;
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Create temporary arrays
        vector<int> L(n1);
        vector<int> R(n2);

        for (int i = 0; i < n1; i++)
            L[i] = arr[left + i];
        
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];   
        
        i = 0;
        j = 0;
        k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j])
                arr[k++] = L[i++];                
            else
                arr[k++] = R[j++];                            
        }

        // Copy remaining elements of L[], if any
        while (i < n1)
            arr[k++] = L[i++];           

        // Copy remaining elements of R[], if any
        while (j < n2)
            arr[k++] = R[j++];            
    }

    void merge_sort(std::vector<int>& arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;

            // Sort first and second halves
            merge_sort(arr, left, mid);
            merge_sort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        //quick_sort(nums, 0, nums.size()-1);
        merge_sort(nums, 0, nums.size()-1);
        return nums;
    }
};
 
