/*
https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/description/?envType=problem-list-v2&envId=array

You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. 
Note that this modifies the array for future operations.
Return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.

Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.

Input: nums = [5,6,7,8,9], x = 4
Output: -1

Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.
*/

class Solution {
public:
    int minOperations_1(vector<int>& nums, int x) {
        int sum = 0;
        int n = nums.size();

        for (int i = 0; i < n; i++)
            sum += nums[i];

        int target = sum - x;
        if (target < 0)
            return -1;
        if (target == 0)
            return n;
        int cur_sum = 0;
        int max_len = -1;        
        int start_idx = 0;
        
        for (int end_idx = 0; end_idx < n; end_idx++) {
            cur_sum += nums[end_idx];
            while (start_idx <= end_idx && cur_sum > target) {
                cur_sum -= nums[start_idx];
                start_idx += 1;                
            }
            if (cur_sum == target) 
                max_len = max(max_len, end_idx - start_idx + 1);               
            
        }
        return max_len == -1 ? -1 : n - max_len;         
    }

    int minOperations_2(vector<int>& nums, int x) {
        int n = nums.size();
        int sum  = 0;
        unordered_map<int, int> mp;
     
        mp[0] = -1;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
            mp[sum] = i;
        }

        if(sum < x)
            return -1;

        int restSum  = sum-x;
        int longest  = INT_MIN;
        sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if(mp.count(sum - restSum)) {
                longest = max(longest, i-mp[sum-restSum]);
            }
        }
        
        return longest==INT_MIN?-1:n-longest;
    }
    
    int minOperations_3(vector<int>& nums, int x) {
        int target=-x;
        for(auto it:nums)
            target+=it;
        int n=nums.size();
        if(target==0)
            return n;
            
        map<int,int> mp;
        mp[0]=-1;
        int sum=0,ans=INT_MIN;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(mp.find(sum-target)!=mp.end())
                ans=max(ans,i-mp[sum-target]);
            mp[sum]=i;
        }
        return ans==INT_MIN?-1:n-ans;
    }

    int minOperations(vector<int>& nums, int x) {
        //return minOperations_1(nums, x);        
        //return minOperations_2(nums, x);
        return minOperations_3(nums, x);
    }
};

