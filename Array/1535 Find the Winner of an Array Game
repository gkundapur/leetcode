/*
https://leetcode.com/problems/find-the-winner-of-an-array-game/description/?envType=problem-list-v2&envId=array

Given an integer array arr of distinct integers and an integer k.
A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, 
we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.

Return the integer which will win the game.
It is guaranteed that there will be a winner of the game.

Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.

Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.
*/

class Solution {
public:
    int getWinnder_1(vector<int>& arr, int k) {
        int winner = arr[0];
        int wins = 0;
        int n = arr.size();

        for (int i = 1; i < n && wins < k; ++i) {
            if (arr[i] > winner) {
                winner = arr[i];
                wins = 1;
            } else
                ++wins;
        }

        return winner;
    }

    int getWinnder_2(vector<int>& arr, int k) {        
        int n = arr.size();
        int maxEl = INT_MIN;
        
        for (int i = 0; i < n; i++)
            maxEl = max(maxEl, arr[i]);

        if (k >= n)             
            return maxEl;        

        int winner = arr[0];
        int wins = 0;

        for (int i = 1; i < n; ++i) {
            if (arr[i] > winner) {
                winner = arr[i];
                wins = 1;
            } else
                ++wins;

            if (wins == k || winner == maxEl)
                break;
        }

        return winner;
    }

    int getWinner(vector<int>& arr, int k) {
        return getWinnder_1(arr, k);  // beats 100%
        //return getWinnder_2(arr, k); // 43%
    }
};
