/*
https://leetcode.com/problems/combination-sum-iv/description/?envType=problem-list-v2&envId=array

Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.
The test cases are generated so that the answer can fit in a 32-bit integer.

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.

Input: nums = [9], target = 3
Output: 0
*/

class Solution {
public:
    
    int combinationSum4_TLE(vector<int>& nums, int target) {
        if (target == 0)
            return 1;
        
        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (target >= nums[i])
                res += combinationSum4(nums, target-nums[i]); 
        }
        return res;        
    }

    int combinationSum4_memo(vector<int>& nums, int target, vector<int>& dp) {
        if (target < 0)
            return 0;        

        if (target == 0)
            return 1;

        if (dp[target] != -1)
            return dp[target];

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (target >= nums[i]) 
                res += combinationSum4_memo(nums, target-nums[i], dp);
        }
        dp[target] = res;
        return res;
    }
    int combinationSum4(vector<int>& nums, int target) {
        //return combinationSum4_TLE(nums, target);
        vector<int> dp(target+1, -1);
        return combinationSum4_memo(nums, target, dp);
    }
};
