/*
https://leetcode.com/problems/pascals-triangle/description/?envType=problem-list-v2&envId=array

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Input: numRows = 1
Output: [[1]]
*/

class Solution {
public:
    int nCr(int n, int r) {
        if (n == r || r == 0)
            return 1;

        return nCr(n-1, r-1) + nCr(n-1, r);
    }

    vector<vector<int>> generate_pascal(int numRows) {
        vector<int> rows;
        vector<vector<int>> result;

        for (int n = 0; n < numRows; n++) {
            for (int r = 0; r <= n; r++) {
                int num = nCr(n, r);
                rows.push_back(num);
            }
            result.push_back(rows);
            rows.clear();
        }
        return result;      
    }

    vector<vector<int>> generate_pascal1(int numRows) {
        vector<vector<int>> result(numRows);

        for (int i = 0; i < numRows; i++) {
            result[i] = vector<int> (i+1, 1);
            for (int j = 1; j < i; j++) 
                result[i][j] = result[i-1][j] + result[i-1][j-1];
        }
        return result;
    }

    vector<vector<int>> generate(int numRows) {
        //return generate_pascal(numRows);
        return generate_pascal1(numRows);   
    }
};
