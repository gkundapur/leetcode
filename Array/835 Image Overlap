/*
https://leetcode.com/problems/image-overlap/description/?envType=problem-list-v2&envId=array

You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.
We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. 
We can then calculate the overlap by counting the number of positions that have a 1 in both images.
Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.
Return the largest possible overlap.

Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We translate img1 to right by 1 unit and down by 1 unit.

Input: img1 = [[1]], img2 = [[1]]
Output: 1

Input: img1 = [[0]], img2 = [[0]]
Output: 0
*/

class Solution {
public:
    int countOnes(vector<vector<int>>& img1, vector<vector<int>>& img2, int row_off, int col_off) {
        int n = img1.size();
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // check for overlapping 1's if img1[i][j] == img2[i+row_off][j+col_off] == 1
                int img2_row = i + row_off;
                int img2_col = j + col_off;

                // check for overflow
                if (img2_row < 0 || img2_row >= n || img2_col < 0 || img2_col >= n)
                    continue;

                if (img1[i][j] == 1 && img2[img2_row][img2_col] == 1)
                    count++;
            }
        }
        return count;
    }

    int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {
        int n = img1.size();
        int largeOverlap = 0;

        for (int row_off = -n+1; row_off < n; row_off++) {
            for (int col_off = -n+1; col_off < n; col_off++) {
                int count = countOnes(img1, img2, row_off, col_off);
                largeOverlap = max(largeOverlap, count);
            }
        }
        return largeOverlap;        
    }
};
