/*
https://leetcode.com/problems/missing-number/description/?envType=problem-list-v2&envId=array

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array. 

Input: nums = [3,0,1]
Output: 2
Explanation:
n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Input: nums = [0,1]
Output: 2
Explanation:
n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation:
n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
*/

class Solution {
public:
    int missingNumber_1(vector<int>& nums) {
        int missingNum = nums.size();

        for (int i = 0; i < nums.size(); i++) {
            missingNum ^= i;
            missingNum ^= nums[i];
        }
        return missingNum;
    }

    int missingNumber_2(vector<int>& nums) {
        int n = nums.size();
        int missingNum = n * (n+1)/2;
        for (int i = 0; i < n; i++)
            missingNum -= nums[i];
        return missingNum;
    }
    int missingNumber(vector<int>& nums) {
        //return missingNumber_1(nums);        
        return missingNumber_2(nums);
    }
};
