/*
https://leetcode.com/problems/combination-sum-ii/description/?envType=problem-list-v2&envId=array

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
*/

class Solution {
public:
    vector<vector<int>> result;
    void getcombinationSum2(vector<int>& candidates, int start, int target, vector<int>& temp) {
        if (target < 0)
            return;
        
        if (target == 0) {
            result.push_back(temp);
            return;
        }
      
        for (int i = start; i < candidates.size(); i++) {
            if (i > start && candidates[i] == candidates[i-1])
                continue;        

            temp.push_back(candidates[i]);
            getcombinationSum2(candidates, i+1, target-candidates[i], temp);
            temp.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        getcombinationSum2(candidates, 0, target, temp);
        return result;        
    }
};
