/*
https://leetcode.com/problems/permutations-ii/description/?envType=problem-list-v2&envId=array

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
*/

class Solution {
public:
    vector<vector<int>> result;
    int n;

    void getpermuteUnique(vector<int>& nums, int idx) {
        if (idx == n) {
            result.push_back(nums);
            return;            
        }
        unordered_set<int> unique_set;
        for (int i = idx; i < n; i++) {
            if (unique_set.find(nums[i]) == unique_set.end()) {                
                unique_set.insert(nums[i]);
                swap(nums[i], nums[idx]);
                getpermuteUnique(nums, idx+1);
                swap(nums[i], nums[idx]);
            }
        }
    }
    
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        n = nums.size();
        getpermuteUnique(nums, 0);
        return result;        
    }
};
