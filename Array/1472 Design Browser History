/*
https://leetcode.com/problems/design-browser-history/description/?envType=problem-list-v2&envId=array

You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.

Implement the BrowserHistory class:

BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
void visit(string url) Visits url from the current page. It clears up all the forward history.
string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.
string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.
 
Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
browserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"
*/

struct ListNode_t {
    string url;
    ListNode_t *prev;
    ListNode_t *next;

    ListNode_t(string url) : url(url), prev(NULL), next(NULL) {}
};

class BrowserHistory { 
//------------------------------------------------------------------------------
    vector<string> urls;
    int idx;
    int lastidx;

    void visit_vec(string url) {
        if (++idx < urls.size())
            urls[idx] = url;
        else
            urls.push_back(url);
        lastidx = idx;
    }

    string back_vec(int steps) {
        idx = max(0, idx-steps);
        return urls[idx];
    }
    
    string forward_vec(int steps) {
        idx = min(lastidx, idx+steps);
        return urls[idx];
    } 

    //------------------------------------------------------------------------------
    stack<string> backStack, forwardStack;

    void visit_stack(string url) {                
        backStack.push(url);

        // reset the fwd stack
        // forwardStack = stack<string>();
        while (!forwardStack.empty())
            forwardStack.pop();      
    }

    string back_stack(int steps) {        
        while (backStack.size() > 1 && steps--) {            
            forwardStack.push(backStack.top());            
            backStack.pop();            
        }
        return backStack.top();        
    }

        string forward_stack(int steps) {
        while (steps-- && !forwardStack.empty()) {        
            backStack.push(forwardStack.top());            
            forwardStack.pop();            
        }

        return backStack.top();        
    }

    //------------------------------------------------------------------------------
    ListNode_t *cur;

    void visit_list(string url) {
        // Create a node for this visit
        ListNode_t *urlNode = new ListNode_t(url);

        urlNode->prev = cur;
        cur->next = urlNode;
        
        cur = urlNode;
    } 
        
    string back_list(int step) {
        
        // Pointer to traverse backward
        ListNode_t *temp = cur;

        // Travel back `step` times if possible
        while (temp->prev != NULL && step--)
            temp = temp->prev;              

        // Update current pointer after moving back
        cur = temp;

        return cur->url;
    }


    string forward_list(int step) {       
        ListNode_t *temp = cur;

        // Travel forward `step` times if possible
        while (temp->next != NULL && step--)
            temp = temp->next;        

        // Update current pointer after moving forward
        cur = temp;

        return cur->url;
    }

    void BrowserHistory_vector(string homepage) {
        idx = -1;
        lastidx = -1;
        visit_vec(homepage);
    }

    void BrowserHistory_stack(string homepage) {
        visit_stack(homepage);

        //reset the forward stack
        forwardStack = stack<string>();
    }

    void BrowserHistory_list(string homepage) {
        cur = new ListNode_t(homepage);
    }

public:
     BrowserHistory(string homepage) {
        //BrowserHistory_vec(homepage);
        BrowserHistory_stack(homepage);
        //BrowserHistory_list(homepage);
    }

    void visit(string url) {
        //visit_vec(url);
        visit_stack(url);
        //visit_list(url);
    }
    
    string back(int steps) {        
        //return back_vec(steps);
        return back_stack(steps);
        //return back_list(steps);
    }
    
    string forward(int steps) {
        //return forward_vec(steps);
        return forward_stack(steps);
        //return forward_list(steps);
    }    
};

 /**
 * Your BrowserHistory object will be instantiated and called as such:
 * BrowserHistory* obj = new BrowserHistory(homepage);
 * obj->visit(url);
 * string param_2 = obj->back(steps);
 * string param_3 = obj->forward(steps);
 */
