/*
https://leetcode.com/problems/jump-game-iv/description/

Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.
 

Constraints:

1 <= arr.length <= 5 * 104
-108 <= arr[i] <= 108
*/

class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size();

        unordered_map<int, vector<int>> mp; // {num, indices}        
        // store {num, indices} in map
        for (int i = 0; i < n; i++)
            mp[arr[i]].push_back(i);

        queue<int> q;
        vector<bool> visited(n, false);
        int steps = 0;

        q.push(0); // push index 0 in q
        visited[0] = true; // mark index 0 visited
        while(!q.empty()) {
            int size = q.size();
            while (size--) {
                int cur = q.front();
                q.pop();

                if (cur == n-1)
                    return steps;

                int left = cur-1;
                int right = cur+1;

                // can go left
                if (left >= 0 && !visited[left]) {
                    q.push(left);
                    visited[left] = true;
                }

                // can go right
                if (right < n && !visited[right]) {
                    q.push(right);
                    visited[right] = right;
                }

                // can go to all indices for arr[cur] stored in map
                for (int &idx : mp[arr[cur]]) {
                    if (!visited[idx]) {
                        q.push(idx);
                        visited[idx] = true;
                    }
                }

                // remove the entry once all the entries of mp[arr[cur]] is visited
                mp.erase(arr[cur]); 
            }
            steps++;
        }
        return -1;       
    }
};
