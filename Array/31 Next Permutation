/*
https://leetcode.com/problems/next-permutation/description/?envType=problem-list-v2&envId=array

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, 
if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation 
that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

Input: nums = [1,2,3]
Output: [1,3,2]

Input: nums = [3,2,1]
Output: [1,2,3]

Input: nums = [1,1,5]
Output: [1,5,1]
*/

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        /*
        Find the break-point, i: 
            Break-point first index i from the back of the given array where arr[i] < arr[i+1].
        
        If a break-point exists:
            Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index i+1 to n-1) 
            and swap it with arr[i].

        If such a break-point does not exist i.e. reverse the whole array 
        Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.
        */
        int n =  nums.size();

        /* step1: Find the break point */
        int idx = -1;
        for (int i = n-1; i > 0; i--) {
            if (nums[i] > nums[i-1]) {
                idx = i - 1;
                break;
            }            
        }
        
        /* step2: if break point exists, find the just first greater element of nums[idx] from right end*/
        if (idx != -1) {
            int swap_idx = idx;
            for (int i = n - 1; i > idx; i--) {
                if (nums[i] > nums[idx]) {
                    swap_idx = i;
                    break;
                }              
            }
            cout << "idx = " << idx << endl;
            cout << "swap_idx = " << swap_idx << endl;
            swap(nums[idx], nums[swap_idx]);
        }

        /* step3: reverse the right half */
        reverse(nums.begin() + idx + 1, nums.end());

    }
};
