/*

https://leetcode.com/problems/house-robber/description/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will 
automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money 
you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

*/

class Solution {
public:
    // TLE
    int rob_recur(vector<int>& nums, int i, int n) {
        if (i >= n)
            return 0;

        int steal = nums[i] + rob_recur(nums, i+2, n);
        int skip = rob_recur(nums, i+1, n);
        return max(steal, skip);
    }

    //TLE
    int dp[101];
    int rob_rec_memo(vector<int>& nums, int i, int n) {
        if (i >= n)
            return 0;
        if (dp[i] != -1)
            return dp[i];

        int steal = nums[i] + rob_recur(nums, i+2, n);
        int skip = rob_recur(nums, i+1, n);
        return dp[i] = max(steal, skip);        
    }

    //TLE
    int rob_O1(vector<int>& nums) {
        int prev = 0;
        int cur = 0;

        for (int num : nums) {
            int temp = max(cur, prev+num);         
            prev = cur;
            cur = temp;
        }
        return cur;
    }

    int rob(vector<int>& nums) {
        int n = nums.size();
        //return rob_recur(nums, 0, n);

        //memset(dp, -1, sizeof(dp));
        //return rob_rec_memo(nums, 0, n);

        return rob_O1(nums);
    }
};
