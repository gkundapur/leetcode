/*
https://leetcode.com/problems/subsets-ii/description/?envType=problem-list-v2&envId=array

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Input: nums = [0]
Output: [[],[0]]
*/

class Solution {
public:
    void getsubsets(vector<int>& nums, int idx, vector<int> subsets, vector<vector<int>>& result) {
        result.push_back(subsets); // include the current element in subset
        for (int i = idx; i < nums.size(); i++) {
            if (i > idx && nums[i] == nums[i-1]) // skip all duplicate elements
                continue;
            subsets.push_back(nums[i]);
            getsubsets(nums, i+1, subsets, result);
            subsets.pop_back();            
        }
    }

    void getsubsets_1(vector<int>& nums, int idx, vector<int> subsets, vector<vector<int>>& result) {
        if (idx == nums.size()) {
            result.push_back(subsets);
            return;
        }

        subsets.push_back(nums[idx]);
        getsubsets_1(nums, idx+1, subsets, result);
        subsets.pop_back();

        int i = idx + 1;
        while (i < nums.size() && nums[i] == nums[i-1])
            i++;
        getsubsets_1(nums, i, subsets, result);
    }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> subsets;
        
        //getsubsets(nums, 0, subsets, result);
        sort(nums.begin(), nums.end()); // // sort to group duplicate elements together
        getsubsets_1(nums, 0, subsets, result);
        return result;        
    }
};
