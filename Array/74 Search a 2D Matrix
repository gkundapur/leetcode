/*
https://leetcode.com/problems/search-a-2d-matrix/description/

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
1   3  5  7
10 11 16 20
23 30 34 60

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

1   3  5  7
10 11 16 20
23 30 34 60
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
*/

class Solution {
public:
    bool searchMatrix_linear(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();

        int i = 0;
        int j = n - 1;
        while (i <= m && j >= 0) {
            if (matrix[i][j] > target)
                j--;
            else if (matrix[i][j] < target)
                i++;
            else
                return true;
        }
        return false;
    }

    bool searchMatrix_binarysearch(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();

        int start = 0;
        int end = (m * n) - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            // To convert 1-dim index to 2-dim index
            // row = mid/col, col = mid % n
            int row = mid/n;
            int col = mid%n;
            if (matrix[row][col] > target)
                end = mid-1;
            else if (matrix[row][col] < target)
                start = mid+1;
            else
                return true;
        }
        return false;
    }

    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        //return searchMatrix_linear(matrix, target);
        return searchMatrix_binarysearch(matrix, target);
    }
};
