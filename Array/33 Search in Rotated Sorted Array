/*
https://leetcode.com/problems/search-in-rotated-sorted-array/description/

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104
*/

class Solution {
public:
    int search2(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            cout << "low = " << low << " hig = " << high << " mid = " << mid << endl;

            if (nums[mid] == target)
                return mid;

            if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target < nums[mid])
                    high = mid - 1;
                else
                    low = mid + 1;
            } else {
                if (nums[mid] < target && target <= nums[high])
                    low = mid+1;
                else
                    high = mid-1;
            }                
        }
        return -1;
    }

    int binarySearch(vector<int>& nums, int lo, int hi, int x) {
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] == x) 
                return mid;
            if (nums[mid] < x) 
                lo = mid + 1;
            else 
                hi = mid - 1;
        }
        return -1;
    }

    // return index of smallest element
    int findPivot(vector<int>& nums, int low, int high) {
        while (low < high) {
            // current subarray already sorted
            // minimum is at low index
            if (nums[low] <= nums[high])
                return low;

            int mid = low + (high - low)/2;
           
            // The right half is not sorted. So
            // the minimum element must be in the
            // right half.
            if (nums[mid] > nums[high])
                low = mid + 1;
      
            // The right half is sorted. Note that in
            // this case, we do not change high to mid - 1
            // but keep it to mid. The mid element
            // itself can be the smallest
            else
                high = mid;
        }
        return low;
    }
    
    int search1(vector<int>& nums, int target) {
        int n = nums.size();
        int pivot = findPivot(nums, 0, n-1); // find index of smallest element

#if 0
        // If we found a pivot, then first compare target with pivot
        // and then search in two subarrays around pivot
        if (nums[pivot] == target)
            return pivot;

        // If the minimum element is present at index 0,
        // then the whole array is sorted
        if (pivot == 0)
            return binarySearch(nums, 0, n-1, target);

        if (nums[0] <= target)
            return binarySearch(nums, 0, pivot-1, target);
        return binarySearch(nums, pivot+1, n-1, target);
#endif
        int idx = binarySearch(nums, 0, pivot-1, target);
        if (idx != -1)
            return idx;
        
        idx = binarySearch(nums, pivot, n-1, target);
        return idx;       
    }

    int search(vector<int>& nums, int target) {
        return search1(nums, target);
        //return search2(nums, target);       
    }  
};
