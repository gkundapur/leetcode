/*
 * https://leetcode.com/problems/merge-k-sorted-lists/description/?envType=problem-list-v2&envId=linked-list
 * ou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

 * Merge all the linked-lists into one sorted linked-list and return it.
 * Example 1:

 * Input: lists = [[1,4,5],[1,3,4],[2,6]]
 * Output: [1,1,2,3,4,4,5,6]
 * Explanation: The linked-lists are:
 * [
 *  1->4->5,
 *  1->3->4,
 *  2->6
 * ]
 * merging them into one sorted list:
 * 1->1->2->3->4->4->5->6
 */


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *mergetwolists(ListNode *l1, ListNode *l2) {
        if (l1 == NULL) return l2;
        if (l2 == NULL) return l1;

        ListNode *result = NULL;
        if (l1->val <= l2->val) {
            result = l1;
            result->next = mergetwolists(l1->next, l2);
        } else {
            result = l2;
            result->next = mergetwolists(l1, l2->next);
        }
        return result;        
    }

    ListNode *partition_merge(int start, int end, vector<ListNode*>& lists) {
        if (start == end)
            return lists[start];

        if (start < end) {
            int mid = start + (end - start) / 2;
            ListNode *L1 = partition_merge(start, mid, lists);
            ListNode *L2 = partition_merge(mid+1, end, lists);
            
            return mergetwolists(L1, L2);
        }
        return NULL;
    } 

    ListNode* mergeKLists_1(vector<ListNode*>& lists) {
        int k = lists.size();

        if (k == 0)
            return NULL;

        return partition_merge(0, k-1, lists);
    }

    struct comp {
        bool operator()(ListNode*& l1, ListNode*& l2)
        {
            return l1->val > l2->val;
        }
    };

    ListNode *mergeKLists_using_pq(vector<ListNode*>& lists) {
        ListNode *dummy = new ListNode(-1);
        ListNode *prev = dummy;

        priority_queue<ListNode *, vector<ListNode*>, comp> pq;
        //push all the head nodes of lists into min heap, top element will be min
        for (int i = 0; i < lists.size(); i++) {
            if (lists[i] != NULL)
                pq.push(lists[i]);
        }

        while (!pq.empty()) {
            ListNode *node = pq.top();
            pq.pop();

            if (node->next)
                pq.push(node->next);

            prev->next = node;
            prev = node;
        }
        return dummy->next;
    }       
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //return mergeKLists_1(lists);
        return mergeKLists_using_pq(lists);
    }
};
