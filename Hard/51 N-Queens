/*
https://leetcode.com/problems/n-queens/description/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9
*/

class Solution {
public:
    bool isSafe(vector<string>& board, int row, int col, int n) {
        int i, j;

        // horizontal
        for (i = 0; i < n; i++)
            if (board[row][i] == 'Q')
                return false;

        // vertical
        for (i = 0; i < n; i++)
            if (board[i][col] == 'Q')
                return false;

        // left diagonal
        for (i = row, j = col; i >= 0 && j >= 0; j--, i--)
            if (board[i][j] == 'Q')
                return false;

        // right diagonal
        for (i = row, j = col; i >= 0 && j < n; i--, j++)
            if (board[i][j] == 'Q')
                return false;

        return true;
    }

    void nqueens(vector<string>& board, int row, int n, vector<vector<string>>& result) {
        if (row == n) {
            result.push_back(board);
            return;
        }

        for (int col = 0; col < n; col++) {
            // check if queen can be placed in board[row][col]
            if (isSafe(board, row, col, n)) {
                // place the queen in board[row][col]
                board[row][col] = 'Q';

                // Recur to place the queen in rest of the columns
                nqueens(board, row+1, n, result);

                // if placing queen in board[row][col] doesn't lead to a solution
                // remove queen from the board[row][col]
                board[row][col] = '.';
            }
        }
    }

    void printSolution(vector<vector<string>>& result, int n) {
        for (vector<string>& board : result) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++)
                    cout << board[i][j] << ' ';
                cout << endl;
            }
            cout << endl << endl;
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<string> board (n, string(n, '.'));
        vector<vector<string>> result;
        nqueens(board, 0, n, result);
        //printSolution(result, n);
        return result;        
    }
};
