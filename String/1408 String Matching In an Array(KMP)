/*
https://leetcode.com/problems/string-matching-in-an-array/description/

Given an array of string words, return all strings in words that are a substring of another word. You can return the answer in any order.

 

Example 1:

Input: words = ["mass","as","hero","superhero"]
Output: ["as","hero"]
Explanation: "as" is substring of "mass" and "hero" is substring of "superhero".
["hero","as"] is also a valid answer.
Example 2:

Input: words = ["leetcode","et","code"]
Output: ["et","code"]
Explanation: "et", "code" are substring of "leetcode".
Example 3:

Input: words = ["blue","green","bu"]
Output: []
Explanation: No string of words is substring of another string.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 30
words[i] contains only lowercase English letters.
All the strings of words are unique.
*/

class Solution {
     vector<int> computeLPS(string pat) {
        int M = pat.length();
        int len = 0; // Length of the previous longest prefix & suffix
        vector<int> lps(M, 0);
            
        int i = 1;
        while (i < M) {
            if (pat[i] == pat[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1]; 
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    bool searchKMP(string pat, string txt) {
        int N = txt.length();
        int M = pat.length();
        
        vector<int> lps = computeLPS(pat);
    
        int i = 0; // Index for text
        int j = 0; // Index for pattern
    
        while (i < N) {
            if (pat[j] == txt[i]) {
                i++;
                j++;
            }
    
            if (j == M)
                return true;
            else if (i < N && pat[j] != txt[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }        
        return false;
    }

public:
    vector<string> stringMatching(vector<string>& words) {
        int n = words.size();
        vector<string> result;

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(i != j) {               
                    if(searchKMP(words[i], words[j])) {
                        result.push_back(words[i]);
                        break;
                    }
                }
            }
        }
        return result;        
    }
};
