/*
https://leetcode.com/problems/generate-parentheses/description/

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]

	   	      (0, 0, '')
                         |
                     (1, 0, '(')
                     /           \
              (2, 0, '((')      (1, 1, '()')
                  /                 \
           (2, 1, '(()')           (2, 1, '()(')
                /                       \
         (2, 2, '(())')                (2, 2, '()()')
               |                            |
         res.append('(())')             res.append('()()')
*/

class Solution {
public:
    void dfs(int open_count, int close_count, string s, int n, vector<string>& result) {
        //if (open_count == close_count && open_count + close_count == n * 2) {
        if (s.size() == 2 * n) {
            result.push_back(s);
            return;
        }

        if (open_count < n)
            dfs(open_count+1, close_count, s + "(", n, result);

        if (close_count < open_count)
            dfs(open_count, close_count+1, s + ")", n, result);
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        dfs(0, 0, "", n, result);
        return result;        
    }
};
