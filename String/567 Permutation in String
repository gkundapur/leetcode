/*
https://leetcode.com/problems/permutation-in-string/description/

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
*/

class Solution {
    
    bool compareCounts(int cnt1[], int cnt2[]) {
        for (int i = 0; i < 26; i++) {
            if (cnt1[i] != cnt2[i])
                return false;
        }
        return true;
    }

    bool findPermutations(string s1, string s2) {
        int lenS1 = s1.size();
        int lenS2 = s2.size();        

        if (lenS1 > lenS2)
            return false;

        int countS[26] = {0};
        int countW[26] = {0};

        // count frequencies of s1 and first window of s1
        for (int i = 0; i < lenS1; i++) {
            countS[s1[i] - 'a']++;
            countW[s2[i] - 'a']++;            
        }

        for (int i = 0; i <= lenS2 - lenS1; i++) {
            if (compareCounts(countS, countW))
                return true;
            
            if (i + lenS1 < lenS2) {
                countW[s2[i] - 'a']--;
                countW[s2[i + lenS1] - 'a']++;
            }
        }
        return false;
    }

public:
    bool checkInclusion(string s1, string s2) {
        return findPermutations(s1, s2);        
    }
};
