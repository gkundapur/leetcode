/*
 * https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/
 * Given the head of a linked list, remove the nth node from the end of the list and return its head.
 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head == NULL || n <= 0)
            return head;

        ListNode *nthNode, *prevNode;

        nthNode = head;
        for (int i = 0; i < n; i++)
            if (nthNode)
                nthNode = nthNode->next;
        if (nthNode == NULL)
            return head->next;

        prevNode = head;
        while (nthNode->next != NULL) {
            prevNode = prevNode->next;
            nthNode = nthNode->next;
        }
        
        if (prevNode && prevNode->next) {
            //ListNode *temp = prevNode->next;
            prevNode->next = prevNode->next->next;
            //delete temp;
        }
        return head;
    }

};
