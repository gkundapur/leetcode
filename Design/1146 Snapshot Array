/*
https://leetcode.com/problems/snapshot-array/?envType=problem-list-v2&envId=design

Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 5 * 104
0 <= index < length
0 <= val <= 109
0 <= snap_id < (the total number of times we call snap())
At most 5 * 104 calls will be made to set, snap, and get.
*/

class SnapshotArray {
private:
    //unordered_map<int, vector<pair<int, int>> mp;   // {index -> {snap_id, val}}
    vector<vector<pair<int, int>>> snaps;              // snaps[idx] -> {snap_id, val}
    int snap_id;
public:
    SnapshotArray(int length) {
        snaps.resize(length);
        snap_id = 0;        
    }
    
    void set(int index, int val) {
        snaps[index].push_back({snap_id, val});
    }
    
    int snap() {
        snap_id++;
        return snap_id-1;        
    }
    
    int get(int index, int snap_id) {    
        // upper_bound also does binary search
        auto it = ranges::upper_bound(begin(snaps[index]), end(snaps[index]), make_pair(snap_id, INT_MAX));
        if (it == snaps[index].begin()) // no data at snap_id
            return 0;
        else
            return prev(it)->second;  // pair<snap_id, val
#if 0  
        //vector<pair<int, int>> vec = snaps[index];
        auto vec = snaps[index];
        int left = 0, right = vec.size();
        //get(0, 0)
        // {0: [(0, 5)], (0, 6)]}          
        //   l = 0[(0,5)], r = 1[(0,6)], mid = 0+1/2 = 0 -> <0, 5>
        // mid = [(0, 5)], 0 > 0 false, left = mid+1 = 1

        while (left < right) {            
            //int mid = left + (right-left)/2;
            int mid = (left + right) >> 1;
            if (vec[mid].first > snap_id) { // pair<snap_id, val>
                right = mid;
            } else {
                left = mid + 1;
            }
        }       
        //cout << "left = " << left << endl;
        return left == 0 ? 0 : vec[left - 1].second;
#endif
    }
};

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray* obj = new SnapshotArray(length);
 * obj->set(index,val);
 * int param_2 = obj->snap();
 * int param_3 = obj->get(index,snap_id);
 */
