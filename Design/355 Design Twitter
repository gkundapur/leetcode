/*
https://leetcode.com/problems/design-twitter/description/?envType=problem-list-v2&envId=design

Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

Implement the Twitter class:

Twitter() Initializes your twitter object.
void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
 

Example 1:

Input
["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]

Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.
twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
twitter.unfollow(1, 2);  // User 1 unfollows user 2.
twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
 

Constraints:

1 <= userId, followerId, followeeId <= 500
0 <= tweetId <= 104
All the tweets have unique IDs.
At most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.
A user cannot follow himself.
*/

class Twitter {
#if 0
    //vector<pair<userId, tweetId>>, recent tweets at end of vector
    vector<pair<int, int>> tweets;

    //unordered_map<userId, unordered_map<falloweeId, 0/1> 1 - fallowing, 0 - unfallowing
    unordered_map<int, unordered_map<int, int>> fallowers;
#endif

    // Maintaining the list of friends the user has.
    map<int, set<int> > friends_of_User;
    int curr = 0;

    // To store the tweets sorted as most recent
    priority_queue<vector<int> > timeline;


public:
    Twitter() {
        friends_of_User.clear();
        curr = 0;
        timeline = priority_queue<vector<int> >();        
    }
    
    void postTweet(int userId, int tweetId) {
        //tweets.push_back({userId, tweetId});
        timeline.push({curr++, tweetId, userId});
    }
    
    vector<int> getNewsFeed(int userId) {
 #if 0
        vector<int> feeds;
        int count = 0;

        for (int i = tweets.size() - 1; i >= 0 && count < 10; i--) {
            if (tweets[i].first == userId || fallowers[userId][tweets[i].first]) {
                feeds.push_back(tweets[i].second);
                count++;
            }
        }
        return feeds;
 #endif
        vector<int> ans;
        priority_queue<vector<int>> userTimeline = timeline;
        int n = 0;

        while (!userTimeline.empty() && n < 10) {
            auto topTweet = userTimeline.top();
            userTimeline.pop();

            // Check whether the tweet has been
            // posted by the user or one of the friends
            if (topTweet[2] == userId || 
                friends_of_User[userId].count( topTweet[2])) {
                ans.push_back(topTweet[1]);
                n++;
            }
        }
        return ans;
    }
    
    void follow(int followerId, int followeeId) {
        //fallowers[followerId][followeeId] = 1;

        // Insert the followeeId in the map
        // corresponding to the followerId
        friends_of_User[followerId].insert(followeeId);
    }
    
    void unfollow(int followerId, int followeeId) {
        //fallowers[followerId][followeeId] = 0;

        // Remove the followeeId in the map
        // corresponding to the followerId
        friends_of_User[followerId].erase(followeeId);
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */

 /*
 int main() {
    Twitter obj;
    int userId, tweetId;

    // Post tweet
    userId = 1, tweetId = 5;
    obj.postTweet(userId, tweetId);

    // Get newsfeed
    vector<int> vec = obj.getNewsFeed(userId);
    for (int a : vec)
        cout << a << " ";
    cout << endl;

    // Follow
    int follower, followee;
    follower = 1, followee = 2;
    obj.follow(follower, followee);

    // Post Tweet
    userId = 2, tweetId = 6;
    obj.postTweet(userId, tweetId);

    // Get newsfeed
    userId = 1;
    vec = obj.getNewsFeed(userId);
    for (int a : vec)
        cout << a << " ";
    cout << endl;

    // Unfollow
    follower = 1, followee = 2;
    obj.unfollow(follower, followee);

    // Get newsfeed
    vec = obj.getNewsFeed(userId);
    for (int a : vec)
        cout << a << " ";
    cout << endl;

    return 0;
}
*/
