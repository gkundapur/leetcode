/*
https://leetcode.com/problems/implement-router/description/?envType=problem-list-v2&envId=design

Design a data structure that can efficiently manage data packets in a network router. Each data packet consists of the following attributes:

source: A unique identifier for the machine that generated the packet.
destination: A unique identifier for the target machine.
timestamp: The time at which the packet arrived at the router.
Implement the Router class:

Router(int memoryLimit): Initializes the Router object with a fixed memory limit.

memoryLimit is the maximum number of packets the router can store at any given time.
If adding a new packet would exceed this limit, the oldest packet must be removed to free up space.
bool addPacket(int source, int destination, int timestamp): Adds a packet with the given attributes to the router.

A packet is considered a duplicate if another packet with the same source, destination, and timestamp already exists in the router.
Return true if the packet is successfully added (i.e., it is not a duplicate); otherwise return false.
int[] forwardPacket(): Forwards the next packet in FIFO (First In First Out) order.

Remove the packet from storage.
Return the packet as an array [source, destination, timestamp].
If there are no packets to forward, return an empty array.
int getCount(int destination, int startTime, int endTime):

Returns the number of packets currently stored in the router (i.e., not yet forwarded) that have the specified destination and have timestamps in the inclusive range [startTime, endTime].
Note that queries for addPacket will be made in increasing order of timestamp.

 

Example 1:

Input:
["Router", "addPacket", "addPacket", "addPacket", "addPacket", "addPacket", "forwardPacket", "addPacket", "getCount"]
[[3], [1, 4, 90], [2, 5, 90], [1, 4, 90], [3, 5, 95], [4, 5, 105], [], [5, 2, 110], [5, 100, 110]]

Output:
[null, true, true, false, true, true, [2, 5, 90], true, 1]

Explanation

Router router = new Router(3); // Initialize Router with memoryLimit of 3.
router.addPacket(1, 4, 90); // Packet is added. Return True.
router.addPacket(2, 5, 90); // Packet is added. Return True.
router.addPacket(1, 4, 90); // This is a duplicate packet. Return False.
router.addPacket(3, 5, 95); // Packet is added. Return True
router.addPacket(4, 5, 105); // Packet is added, [1, 4, 90] is removed as number of packets exceeds memoryLimit. Return True.
router.forwardPacket(); // Return [2, 5, 90] and remove it from router.
router.addPacket(5, 2, 110); // Packet is added. Return True.
router.getCount(5, 100, 110); // The only packet with destination 5 and timestamp in the inclusive range [100, 110] is [4, 5, 105]. Return 1.
Example 2:

Input:
["Router", "addPacket", "forwardPacket", "forwardPacket"]
[[2], [7, 4, 90], [], []]

Output:
[null, true, [7, 4, 90], []]

Explanation

Router router = new Router(2); // Initialize Router with memoryLimit of 2.
router.addPacket(7, 4, 90); // Return True.
router.forwardPacket(); // Return [7, 4, 90].
router.forwardPacket(); // There are no packets left, return [].
 

Constraints:

2 <= memoryLimit <= 105
1 <= source, destination <= 2 * 105
1 <= timestamp <= 109
1 <= startTime <= endTime <= 109
At most 105 calls will be made to addPacket, forwardPacket, and getCount methods altogether.
queries for addPacket will be made in increasing order of timestamp.
*/

class Router {
    int n;
    queue<vector<int>> Q;
    set<vector<int>> visited;
    unordered_map<int,deque<int>> destToTimes;
    
    // for approach 2
    int size;
    unordered_set<string> visited2; // {f'{src}_{dst}_{timestamp}'}
    deque<tuple<int, int, int>> packets; // {{src, dst, timestamp}}
    unordered_map<int, deque<int>> destToTimes2; // {dst -> timestamp}

    string getKey(int s, int d, int t) {
        return to_string(s) + "_" + to_string(d) + "_" + to_string(t);
    }

public:
    // ------------------------------------Approach 1----------------------------------------
    void Router_1(int memoryLimit) {
        n = memoryLimit;
    }

    bool addPacket1(int source, int destination, int timestamp) {
        vector p = {source, destination, timestamp};
        if (visited.find(p)!=visited.end()) return 0;
        if (Q.size() == n) {
            vector front = Q.front(); Q.pop();
            visited.erase(front);
            int d = front[1], t = front[2];
            auto &dq = destToTimes[d];
            if (!dq.empty()) dq.pop_front();
            if (dq.empty()) destToTimes.erase(d);
        }
        Q.push(p);
        visited.insert(p);
        destToTimes[destination].push_back(timestamp);
        return 1;
    }

    vector<int> forwardPacket1() {
        if (Q.empty()) return {};
        vector front = Q.front(); Q.pop();
        visited.erase(front);
        int s = front[0], d = front[1], t = front[2];
        auto &dq = destToTimes[d];
        if (!dq.empty()) dq.pop_front();
        if (dq.empty()) destToTimes.erase(d);
        return {s, d, t};
    }

    int getCount1(int destination, int startTime, int endTime) {
         if (destToTimes.find(destination) == destToTimes.end()) return 0;
        auto &dq = destToTimes[destination];
        auto it1 = lower_bound(dq.begin(), dq.end(), startTime);
        auto it2 = upper_bound(dq.begin(), dq.end(), endTime);
        return distance(it1, it2);
    }

    //--------------------------------------Aproach 2 is faster------------------------------
    void Router_2(int memoryLimit) {
        n = memoryLimit;
        size = 0;
    }

    bool addPacket2(int source, int destination, int timestamp) {
        string key = getKey(source, destination, timestamp);
        if (visited2.find(key) != visited2.end())
            return false;
        visited2.insert(key);
            
        if (size == n) {
            forwardPacket(); // remove the oldest.
        }
    
        packets.emplace_back(source, destination, timestamp);
        destToTimes2[destination].emplace_back(timestamp);
    
        ++size;
        return true;
    }

    vector<int> forwardPacket2() {
        if (size == 0) 
            return {};
        
        auto [src, dst, timestamp] = packets.front();
        packets.pop_front();
        --size;
        destToTimes2[dst].pop_front();
        visited2.erase(getKey(src, dst, timestamp));
        return {src, dst, timestamp};
    }

    int getCount2(int destination, int startTime, int endTime) {
        if (!destToTimes2.count(destination)) 
            return 0;

        const auto& q = destToTimes2[destination];
        auto it1 = lower_bound(begin(q), end(q), startTime);
        auto it2 = upper_bound(begin(q), end(q), endTime);
        return it2 - it1;
    }

    Router(int memoryLimit) {
        //Router_1(memoryLimit);
        Router_2(memoryLimit);
    }
    
    bool addPacket(int source, int destination, int timestamp) {
        //return addPacket1(source, destination, timestamp);
        return addPacket2(source, destination, timestamp);
    }
    
    vector<int> forwardPacket() {
        //return forwardPacket1();
        return forwardPacket2();
    }
    
    int getCount(int destination, int startTime, int endTime) {
        //return getCount1(destination, startTime, endTime);
        return getCount2(destination, startTime, endTime);
    }
};

/**
 * Your Router object will be instantiated and called as such:
 * Router* obj = new Router(memoryLimit);
 * bool param_1 = obj->addPacket(source,destination,timestamp);
 * vector<int> param_2 = obj->forwardPacket();
 * int param_3 = obj->getCount(destination,startTime,endTime);
 */
