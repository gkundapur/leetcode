
/*
https://leetcode.com/problems/insert-delete-getrandom-o1/description/?envType=problem-list-v2&envId=array

Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). 
Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
*/

class RandomizedSet {
    vector<int> arr;
    unordered_map<int, int> mp; // {value, index}
public:
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        // return false if already found in map
        if (mp.find(val) != mp.end())
            return false;
        
        // insert the value into array
        arr.push_back(val);

        // store the  index of value in the map
        // pushed back to arr, and it'll be the last element
        mp[val] = arr.size() - 1;
        return true;        
    }
    
    bool remove(int val) {
        // return false if not present in map
        if (mp.find(val) == mp.end())
            return false;

        // get the index of the val from the map
        int idx = mp[val];
        // swap this val with last elemnt as pop_back() in O(1) 
        int lastEl = arr.back();
        arr.back() = val;
        arr[idx] = lastEl;

        // update the index of swapped element
        mp[lastEl] = idx;
        // remove the val entry from map
        mp.erase(val);

        // remove the last element of the array which was swapped
        arr.pop_back();

        return true;
    }
    
    int getRandom() {
        // return the random element from the arr
        int idx = rand() % arr.size();
        return arr[idx];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
