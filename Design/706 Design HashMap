/*
https://leetcode.com/problems/design-hashmap/description/?envType=problem-list-v2&envId=design

Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.
*/

class MyHashMap {
public:
    /*-----------------Using Vector----------------------------------------*/    
    vector<int> buckets;
    int nbuckets;
    void MyHashMap_vector() {
        nbuckets = 1000001;  // 1e6+1
        buckets.resize(nbuckets, -1);        
    }

    void put_vector(int key, int value) {
        buckets[key] = value;
    }

    int get_vector(int key) {
        return buckets[key];
    }

    void remove_vector(int key) {
        buckets[key] = -1;
    }
    /*--------------------------------------------------------------------------*/
    vector<list<pair<int, int>>> storage;
    int size;

    void MyHashMap_chain() {
        size = 10000;
        storage.resize(size);
    }

    void put_chain(int key, int value) {
        int idx = key % size;
        auto& chain = storage[idx];
        for(auto& it:chain) {
            if(it.first == key) {
                it.second = value;
                return;
            }
        }
        chain.emplace_back(key, value);
    }

    int get_chain(int key) {
        int idx = key % size;
        auto& chain = storage[idx];
        if(chain.empty())
            return -1;
        
        for(auto& it:chain) {
            if(it.first == key)
                return it.second;
        }
        return -1;
    }

    void remove_chain(int key) {
        int idx = key % size;
        auto& chain = storage[idx];
        
        /*Traditional way to remove from a list*/
        for (auto it=chain.begin(); it!=chain.end(); ) {
            if(it->first == key) {
                chain.erase(it);
                return;
            }
            it++;
        }        
    }

    MyHashMap() {
        //MyHashMap_vector();
        MyHashMap_chain();
    }
    
    void put(int key, int value) {
        //put_vector(key, value);
        put_chain(key, value);
    }
    
    int get(int key) {
        //return get_vector(key);
        return get_chain(key);
    }
    
    void remove(int key) {
        //remove_vector(key);
        remove_chain(key);
    }
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
