/*
https://leetcode.com/problems/design-a-number-container-system/description/?envType=problem-list-v2&envId=design

Design a number container system that can do the following:

Insert or Replace a number at the given index in the system.
Return the smallest index for the given number in the system.
Implement the NumberContainers class:

NumberContainers() Initializes the number container system.
void change(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.
int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
 

Example 1:

Input
["NumberContainers", "find", "change", "change", "change", "change", "find", "change", "find"]
[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]
Output
[null, -1, null, null, null, null, 1, null, 2]

Explanation
NumberContainers nc = new NumberContainers();
nc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.
nc.change(2, 10); // Your container at index 2 will be filled with number 10.
nc.change(1, 10); // Your container at index 1 will be filled with number 10.
nc.change(3, 10); // Your container at index 3 will be filled with number 10.
nc.change(5, 10); // Your container at index 5 will be filled with number 10.
nc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.
nc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. 
nc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.
 

Constraints:

1 <= index, number <= 109
At most 105 calls will be made in total to change and find.
*/

class NumberContainers {
public:
    unordered_map<int, int> idx_to_num; // index -> num, O(N)
    unordered_map<int, set<int>> num_to_indices; // num -> {indices}, O(N)
    NumberContainers() {
        
    }
    
    void change(int index, int number) {
        if (idx_to_num.find(index) != idx_to_num.end()) {
            int prevNum = idx_to_num[index];
            num_to_indices[prevNum].erase(index);  // O(logN)
            if (num_to_indices[prevNum].empty())
                num_to_indices.erase(prevNum); // O(1)
        }
        
        idx_to_num[index] = number;
        num_to_indices[number].insert(index);   // O(logN)     
    }
    
    int find(int number) {
        if (num_to_indices.find(number) == num_to_indices.end())
            return -1;

        return *num_to_indices[number].begin();    // O(1)    
    }
};

/**
 * Your NumberContainers object will be instantiated and called as such:
 * NumberContainers* obj = new NumberContainers();
 * obj->change(index,number);
 * int param_2 = obj->find(number);
 */


 /****************************Using HEAP******************************************************/
class NumberContainers {
public:
    NumberContainers() {}

    void change(int index, int number) {
        // Update index to number mapping
        indexToNumbers[index] = number;

        // Add index to the min heap for this number
        numberToIndices[number].push(index);
    }

    int find(int number) {
        // If number doesn't exist in our map
        if (numberToIndices.find(number) == numberToIndices.end()) {
            return -1;
        }

        // Get reference to min heap for this number
        auto& minHeap = numberToIndices[number];

        // Keep checking top element until we find valid index
        while (!minHeap.empty()) {
            int index = minHeap.top();

            // If index still maps to our target number, return it
            if (indexToNumbers[index] == number) {
                return index;
            }

            // Otherwise remove this stale index
            minHeap.pop();
        }

        return -1;
    }

private:
    // Map to store number -> min heap of indices
    unordered_map<int, priority_queue<int, vector<int>, greater<int>>>
        numberToIndices;
    // Map to store index -> number
    unordered_map<int, int> indexToNumbers;
};

/**
 * Your NumberContainers object will be instantiated and called as such:
 * NumberContainers* obj = new NumberContainers();
 * obj->change(index,number);
 * int param_2 = obj->find(number);
 */
 /*******************************************************************************************************
